package net.regions_unexplored.data.worldgen.placement;

import net.minecraft.core.Holder;
import net.minecraft.data.worldgen.features.VegetationFeatures;
import net.minecraft.data.worldgen.placement.PlacementUtils;
import net.minecraft.util.valueproviders.ClampedInt;
import net.minecraft.util.valueproviders.UniformInt;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate;
import net.minecraft.world.level.levelgen.placement.*;
import net.regions_unexplored.data.worldgen.features.RuVegetationFeatures;
import net.regions_unexplored.registry.PlacedFeatureRegistry;

import java.util.List;

public class RuVegetationPlacements {
    //-----------------------KEYS-----------------------//
    public static final Holder<PlacedFeature> ACACIA_SHRUB = PlacedFeatureRegistry.register("acacia_shrub", RuVegetationFeatures.ACACIA_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> ALPHA_DANDELION = PlacedFeatureRegistry.register("alpha_dandelion", RuVegetationFeatures.PATCH_ALPHA_DANDELION, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> ALPHA_ROSE = PlacedFeatureRegistry.register("alpha_rose", RuVegetationFeatures.PATCH_ALPHA_ROSE, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> ASHEN_GRASS = PlacedFeatureRegistry.register("ashen_grass", RuVegetationFeatures.PATCH_ASHEN_GRASS, CountPlacement.of(10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome());
    public static final Holder<PlacedFeature> ASHEN_SHRUB = PlacedFeatureRegistry.register("ashen_shrub", RuVegetationFeatures.ASHEN_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> ASTER = PlacedFeatureRegistry.register("aster", RuVegetationFeatures. ASTER, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> AUTUMNAL_SHRUB_MIX = PlacedFeatureRegistry.register("autumnal_shrub_mix", RuVegetationFeatures.AUTUMNAL_SHRUB_MIX, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> AZURE_DAISY = PlacedFeatureRegistry.register("azure_daisy", RuVegetationFeatures.PATCH_AZURE_DAISY, List.of(RarityFilter.onAverageOnceEvery(12), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> BAMBOO = PlacedFeatureRegistry.register("bamboo", RuVegetationFeatures.BAMBOO, NoiseBasedCountPlacement.of(30, -0.8D, 2.0D), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome());
    public static final Holder<PlacedFeature> BAOBAB_ACACIA_SHRUB_MIX = PlacedFeatureRegistry.register("baobab_acacia_shrub_mix", RuVegetationFeatures.BAOBAB_ACACIA_SHRUB_MIX, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> BAOBAB_SHRUB = PlacedFeatureRegistry.register("baobab_shrub", RuVegetationFeatures.BAOBAB_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> BARLEY_DENSE = PlacedFeatureRegistry.register("barley_dense", RuVegetationFeatures.PATCH_BARLEY, NoiseBasedCountPlacement.of(155, 75.0D, 0.0D), InSquarePlacement.spread(), SurfaceWaterDepthFilter.forMaxDepth(0), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BlockPredicateFilter.forPredicate(PlacedFeatureRegistry.onGrassBlockPredicate), BiomeFilter.biome());
    public static final Holder<PlacedFeature> BARLEY_SPARSE = PlacedFeatureRegistry.register("barley_sparse", RuVegetationFeatures.PATCH_BARLEY, RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, CountPlacement.of(ClampedInt.of(UniformInt.of(-3, 1), 0, 1)), BiomeFilter.biome());
    public static final Holder<PlacedFeature> BARREL_CACTUS = PlacedFeatureRegistry.register("barrel_cactus", RuVegetationFeatures.BARREL_CACTUS, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BlockPredicateFilter.forPredicate(BlockPredicate.ONLY_IN_AIR_PREDICATE), BiomeFilter.biome());
    public static final Holder<PlacedFeature> BAYOU_VEGETATION = PlacedFeatureRegistry.register("bayou_vegetation", RuVegetationFeatures.PATCH_BAYOU_VEGETATION, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 14), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> BIRCH_SHRUB = PlacedFeatureRegistry.register("birch_shrub", RuVegetationFeatures.BIRCH_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> BIRCH_SHRUB_MIX = PlacedFeatureRegistry.register("birch_shrub_mix", RuVegetationFeatures.BIRCH_SHRUB_MIX, CountPlacement.of(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> BLACKWOOD_DARK_OAK_SHRUB_MIX = PlacedFeatureRegistry.register("blackwood_dark_oak_shrub_mix", RuVegetationFeatures.BLACKWOOD_DARK_OAK_SHRUB_MIX, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> BLACKWOOD_DECORATION = PlacedFeatureRegistry.register("blackwood_decoration", RuVegetationFeatures.BLACKWOOD_DECORATION, List.of(CountPlacement.of(8), InSquarePlacement.spread(), SurfaceWaterDepthFilter.forMaxDepth(0), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> BLACKWOOD_MUSHROOMS = PlacedFeatureRegistry.register("blackwood_mushrooms", RuVegetationFeatures.BLACKWOOD_BIOSHROOMS, List.of(CountPlacement.of(2), InSquarePlacement.spread(), SurfaceWaterDepthFilter.forMaxDepth(0), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> BLACKWOOD_SHRUB = PlacedFeatureRegistry.register("blackwood_shrub", RuVegetationFeatures.BLACKWOOD_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> BLACKWOOD_VEGETATION = PlacedFeatureRegistry.register("blackwood_vegetation", RuVegetationFeatures.PATCH_BLACKWOOD_VEGETATION, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> BLADED_GRASS = PlacedFeatureRegistry.register("bladed_grass", RuVegetationFeatures.PATCH_BLADED_GRASS, CountOnEveryLayerPlacement.of(155), BlockPredicateFilter.forPredicate(BlockPredicate.ONLY_IN_AIR_PREDICATE), BiomeFilter.biome());
    public static final Holder<PlacedFeature> BLADED_GRASS_BONEMEAL = PlacedFeatureRegistry.register("bladed_grass_bonemeal", RuVegetationFeatures.BLADED_GRASS_SINGLE, PlacementUtils.isEmpty());
    public static final Holder<PlacedFeature> BLUE_BIOSHROOM = PlacedFeatureRegistry.register("blue_bioshroom", RuVegetationFeatures.PATCH_BLUE_BIOSHROOM, List.of(CountOnEveryLayerPlacement.of(5), BlockPredicateFilter.forPredicate(BlockPredicate.ONLY_IN_AIR_PREDICATE), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> CACTUS_DENSE = PlacedFeatureRegistry.register("cactus_dense", VegetationFeatures.PATCH_CACTUS, RarityFilter.onAverageOnceEvery(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> CAVE_GRASS = PlacedFeatureRegistry.register("cave_grass", RuVegetationFeatures.PATCH_GRASS, List.of(CountOnEveryLayerPlacement.of(70), BlockPredicateFilter.forPredicate(BlockPredicate.ONLY_IN_AIR_PREDICATE),  BiomeFilter.biome()));
    public static final Holder<PlacedFeature> CAVE_HYSSOP = PlacedFeatureRegistry.register("cave_hyssop", RuVegetationFeatures.PATCH_CAVE_HYSSOP, List.of(CountOnEveryLayerPlacement.of(2), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> CAVE_TALL_GRASS = PlacedFeatureRegistry.register("cave_tall_grass", RuVegetationFeatures.PATCH_TALL_GRASS, List.of(CountOnEveryLayerPlacement.of(15), BlockPredicateFilter.forPredicate(BlockPredicate.ONLY_IN_AIR_PREDICATE), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> CHERRY_SHRUB = PlacedFeatureRegistry.register("cherry_shrub", RuVegetationFeatures.CHERRY_SHRUB, RarityFilter.onAverageOnceEvery(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> CLOVER = PlacedFeatureRegistry.register("clover", RuVegetationFeatures.PATCH_CLOVER, NoiseThresholdCountPlacement.of(-0.8D, 5, 12), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> CLOVER_SPARSE = PlacedFeatureRegistry.register("clover_sparse", RuVegetationFeatures.PATCH_CLOVER, List.of(RarityFilter.onAverageOnceEvery(2),  NoiseThresholdCountPlacement.of(-0.8D, 5, 12), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> COMMON_SALMONBERRY_BUSH = PlacedFeatureRegistry.register("common_salmonberry_bush", RuVegetationFeatures.PATCH_SALMONBERRY_BUSH, RarityFilter.onAverageOnceEvery(32), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome());
    public static final Holder<PlacedFeature> CORPSE_FLOWER = PlacedFeatureRegistry.register("corpse_flower", RuVegetationFeatures.CORPSE_FLOWER, CountOnEveryLayerPlacement.of(10), BlockPredicateFilter.forPredicate(BlockPredicate.ONLY_IN_AIR_PREDICATE), BiomeFilter.biome());
    public static final Holder<PlacedFeature> CYPRESS_SHRUB = PlacedFeatureRegistry.register("cypress_shrub", RuVegetationFeatures.CYPRESS_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> DAISIES = PlacedFeatureRegistry.register("daisies", RuVegetationFeatures.PATCH_DAISIES, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 9), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> DAISY = PlacedFeatureRegistry.register("daisy", RuVegetationFeatures.PATCH_DAISY, List.of(RarityFilter.onAverageOnceEvery(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> DARK_OAK_SHRUB = PlacedFeatureRegistry.register("dark_oak_shrub", RuVegetationFeatures.DARK_OAK_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> DAY_LILY = PlacedFeatureRegistry.register("day_lily", RuVegetationFeatures.DAY_LILY, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> DEAD_PINE_SHRUB = PlacedFeatureRegistry.register("dead_pine_shrub", RuVegetationFeatures.DEAD_PINE_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> DEAD_SHRUB = PlacedFeatureRegistry.register("dead_shrub", RuVegetationFeatures.DEAD_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> DEAD_SHRUB_MIX = PlacedFeatureRegistry.register("dead_shrub_mix", RuVegetationFeatures.DEAD_SHRUB_MIX, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> DECIDUOUS_VEGETATION = PlacedFeatureRegistry.register("deciduous_vegetation", RuVegetationFeatures.PATCH_DECIDUOUS_VEGETATION, NoiseThresholdCountPlacement.of(-0.8D, 5, 24), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> DIRT_VEGETATION = PlacedFeatureRegistry.register("dirt_vegetation", RuVegetationFeatures.PATCH_DIRT_VEGETATION, NoiseThresholdCountPlacement.of(-0.8D, 5, 10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BlockPredicateFilter.forPredicate(PlacedFeatureRegistry.onDirtPredicate), BiomeFilter.biome());
    public static final Holder<PlacedFeature> DROPLEAF = PlacedFeatureRegistry.register("dropleaf", RuVegetationFeatures.DROPLEAF, CountOnEveryLayerPlacement.of(255), PlacementUtils.RANGE_BOTTOM_TO_MAX_TERRAIN_HEIGHT, BiomeFilter.biome());
    public static final Holder<PlacedFeature> DUCKWEED = PlacedFeatureRegistry.register("duckweed", RuVegetationFeatures.DUCKWEED, List.of(CountPlacement.of(32), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> DUSKMELON = PlacedFeatureRegistry.register("duskmelon", RuVegetationFeatures.DUSKMELON, CountOnEveryLayerPlacement.of(10), BlockPredicateFilter.forPredicate(BlockPredicate.ONLY_IN_AIR_PREDICATE), BiomeFilter.biome());
    public static final Holder<PlacedFeature> DUSKTRAP = PlacedFeatureRegistry.register("dusktrap", RuVegetationFeatures.DUSKTRAP, CountOnEveryLayerPlacement.of(4), BlockPredicateFilter.forPredicate(BlockPredicate.ONLY_IN_AIR_PREDICATE), BiomeFilter.biome());
    public static final Holder<PlacedFeature> ELEPHANT_EAR_DENSE = PlacedFeatureRegistry.register("elephant_ear_dense", RuVegetationFeatures.ELEPHANT_EAR, CountPlacement.of(10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BlockPredicateFilter.forPredicate(BlockPredicate.ONLY_IN_AIR_PREDICATE), BiomeFilter.biome());
    public static final Holder<PlacedFeature> ELEPHANT_EAR_SPARSE = PlacedFeatureRegistry.register("elephant_ear_sparse", RuVegetationFeatures.ELEPHANT_EAR, CountPlacement.of(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BlockPredicateFilter.forPredicate(BlockPredicate.ONLY_IN_AIR_PREDICATE), BiomeFilter.biome());
    public static final Holder<PlacedFeature> ENCHANTED_BIRCH_LEAF_PILE = PlacedFeatureRegistry.register("enchanted_birch_leaf_pile", RuVegetationFeatures.PATCH_ENCHANTED_BIRCH_LEAF_PILE, NoiseThresholdCountPlacement.of(-0.8D, 5, 24), RarityFilter.onAverageOnceEvery(10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> EUCALYPTUS_SHRUB = PlacedFeatureRegistry.register("eucalyptus_shrub", RuVegetationFeatures.EUCALYPTUS_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> FEN_VEGETATION = PlacedFeatureRegistry.register("fen_vegetation", RuVegetationFeatures.PATCH_FEN_VEGETATION, NoiseThresholdCountPlacement.of(-0.8D, 5, 24), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> FERNS = PlacedFeatureRegistry.register("ferns", RuVegetationFeatures.PATCH_FERNS, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 7), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> FLOWERING_LILY = PlacedFeatureRegistry.register("flowering_lily", RuVegetationFeatures.FLOWERING_LILY, List.of(CountPlacement.of(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> FLOWERING_SHRUB = PlacedFeatureRegistry.register("flowering_shrub", RuVegetationFeatures.FLOWERING_SHRUB, RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> FROZEN_FLOWERS = PlacedFeatureRegistry.register("frozen_flowers", RuVegetationFeatures.PATCH_FROZEN_FLOWERS, RarityFilter.onAverageOnceEvery(12), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> GIANT_LILY = PlacedFeatureRegistry.register("giant_lily", RuVegetationFeatures.GIANT_LILY, CountPlacement.of(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome());
    public static final Holder<PlacedFeature> GOLDEN_LARCH_SHRUB = PlacedFeatureRegistry.register("golden_larch_shrub", RuVegetationFeatures.GOLDEN_LARCH_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> GOLDEN_LARCH_SHRUB_MIX = PlacedFeatureRegistry.register("golden_larch_shrub_mix", RuVegetationFeatures.GOLDEN_LARCH_SHRUB_MIX, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> GRASS = PlacedFeatureRegistry.register("grass", RuVegetationFeatures.PATCH_GRASS, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 6), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> GRASS_VEGETATION = PlacedFeatureRegistry.register("grass_vegetation", RuVegetationFeatures.PATCH_GRASS_VEGETATION, NoiseThresholdCountPlacement.of(-0.8D, 5, 10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BlockPredicateFilter.forPredicate(PlacedFeatureRegistry.onGrassBlockPredicate), BiomeFilter.biome());
    public static final Holder<PlacedFeature> GREEN_BIOSHROOM = PlacedFeatureRegistry.register("green_bioshroom", RuVegetationFeatures.PATCH_GREEN_BIOSHROOM, List.of(CountOnEveryLayerPlacement.of(5), BlockPredicateFilter.forPredicate(BlockPredicate.ONLY_IN_AIR_PREDICATE), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> HIBISCUS = PlacedFeatureRegistry.register("hibiscus", RuVegetationFeatures.PATCH_HIBISCUS, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> HYSSOP = PlacedFeatureRegistry.register("hyssop", RuVegetationFeatures.PATCH_HYSSOP, List.of(RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> JOSHUA_SHRUB = PlacedFeatureRegistry.register("joshua_shrub", RuVegetationFeatures.JOSHUA_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> JOSHUA_VEGETATION = PlacedFeatureRegistry.register("joshua_vegetation", RuVegetationFeatures.PATCH_JOSHUA_VEGETATION, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 24), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> JUNGLE_SHRUB = PlacedFeatureRegistry.register("jungle_shrub", RuVegetationFeatures.JUNGLE_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> LARCH_SHRUB = PlacedFeatureRegistry.register("larch_shrub", RuVegetationFeatures.LARCH_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> LARCH_SHRUB_MIX = PlacedFeatureRegistry.register("larch_shrub_mix", RuVegetationFeatures.LARCH_SHRUB_MIX, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> LUPINE_VEGETATION = PlacedFeatureRegistry.register("lupine_vegetation", RuVegetationFeatures.PATCH_LUPINE_VEGETATION, CountPlacement.of(16), RarityFilter.onAverageOnceEvery(10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> MAGNOLIA_SHRUB = PlacedFeatureRegistry.register("magnolia_shrub", RuVegetationFeatures.MAGNOLIA_SHRUB, RarityFilter.onAverageOnceEvery(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> MAGNOLIA_SHRUB_MIX = PlacedFeatureRegistry.register("magnolia_shrub_mix", RuVegetationFeatures.MAGNOLIA_SHRUB_MIX, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> MALLOW = PlacedFeatureRegistry.register("mallow", RuVegetationFeatures.PATCH_MALLOW, List.of(RarityFilter.onAverageOnceEvery(8), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> MANGROVE_SHRUB = PlacedFeatureRegistry.register("mangrove_shrub", RuVegetationFeatures.MANGROVE_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> MAPLE_LEAF_PILE = PlacedFeatureRegistry.register("maple_leaf_pile", RuVegetationFeatures.PATCH_MAPLE_LEAF_PILE, NoiseThresholdCountPlacement.of(-0.8D, 5, 24), RarityFilter.onAverageOnceEvery(10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> MAPLE_SHRUB = PlacedFeatureRegistry.register("maple_shrub", RuVegetationFeatures.MAPLE_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> MAPLE_SHRUB_MIX = PlacedFeatureRegistry.register("maple_shrub_mix", RuVegetationFeatures.MAPLE_SHRUB_MIX, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> MAUVE_ENCHANTED_SHRUB_MIX = PlacedFeatureRegistry.register("mauve_enchanted_shrub_mix", RuVegetationFeatures.MAUVE_ENCHANTED_SHRUB_MIX, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> MAUVE_SHRUB = PlacedFeatureRegistry.register("mauve_shrub", RuVegetationFeatures.MAUVE_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> MEADOW_SAGE = PlacedFeatureRegistry.register("meadow_sage", RuVegetationFeatures.MEADOW_SAGE, RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome());
    public static final Holder<PlacedFeature> MEADOW_VEGETATION = PlacedFeatureRegistry.register("meadow_vegetation", RuVegetationFeatures.PATCH_MEADOW_VEGETATION, NoiseThresholdCountPlacement.of(-0.8D, 5, 8), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> MEDIUM_GRASS = PlacedFeatureRegistry.register("medium_grass", RuVegetationFeatures.PATCH_MEDIUM_GRASS, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 7), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> MOUNTAIN_VEGETATION = PlacedFeatureRegistry.register("mountain_vegetation", RuVegetationFeatures.PATCH_MOUNTAIN_VEGETATION, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 12), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> OAK_SHRUB = PlacedFeatureRegistry.register("oak_shrub", RuVegetationFeatures.OAK_SHRUB, RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> ORANGE_CONEFLOWER = PlacedFeatureRegistry.register("orange_coneflower", RuVegetationFeatures.PATCH_ORANGE_CONEFLOWER, NoiseThresholdCountPlacement.of(-0.8D, 5, 10), RarityFilter.onAverageOnceEvery(10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> ORANGE_MAPLE_LEAF_PILE = PlacedFeatureRegistry.register("orange_maple_leaf_pile", RuVegetationFeatures.PATCH_ORANGE_MAPLE_LEAF_PILE, NoiseThresholdCountPlacement.of(-0.8D, 5, 24), RarityFilter.onAverageOnceEvery(10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> ORANGE_MAPLE_SHRUB = PlacedFeatureRegistry.register("orange_maple_shrub", RuVegetationFeatures.ORANGE_MAPLE_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> OUTBACK_VEGETATION = PlacedFeatureRegistry.register("outback_vegetation", RuVegetationFeatures.PATCH_OUTBACK_VEGETATION, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 16), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> PALM_JUNGLE_SHRUB_MIX = PlacedFeatureRegistry.register("palm_jungle_shrub_mix", RuVegetationFeatures.PALM_JUNGLE_SHRUB_MIX, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> PALM_SHRUB = PlacedFeatureRegistry.register("palm_shrub", RuVegetationFeatures.PALM_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> PINE_DEAD_SHRUB_MIX = PlacedFeatureRegistry.register("pine_dead_shrub_mix", RuVegetationFeatures.PINE_DEAD_SHRUB_MIX, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> PINE_SHRUB = PlacedFeatureRegistry.register("pine_shrub", RuVegetationFeatures.PINE_SHRUB, CountPlacement.of(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> PINE_SPRUCE_SHRUB_MIX = PlacedFeatureRegistry.register("pine_spruce_shrub_mix", RuVegetationFeatures.PINE_SPRUCE_SHRUB_MIX, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> PINK_BIOSHROOM = PlacedFeatureRegistry.register("pink_bioshroom", RuVegetationFeatures.PATCH_PINK_BIOSHROOM, List.of(CountOnEveryLayerPlacement.of(2), BlockPredicateFilter.forPredicate(BlockPredicate.ONLY_IN_AIR_PREDICATE), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> PINK_BIOSHROOM_DENSE = PlacedFeatureRegistry.register("pink_bioshroom_dense", RuVegetationFeatures.PATCH_PINK_BIOSHROOM, CountPlacement.of(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> PINK_FLOWERS = PlacedFeatureRegistry.register("pink_flowers", RuVegetationFeatures.PATCH_PINK_FLOWERS, RarityFilter.onAverageOnceEvery(6), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> PINK_MAGNOLIA_FLOWERS = PlacedFeatureRegistry.register("pink_magnolia_flowers", RuVegetationFeatures.PINK_MAGNOLIA_FLOWERS, CountPlacement.of(15), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, BiomeFilter.biome());
    public static final Holder<PlacedFeature> PINK_MAGNOLIA_SHRUB = PlacedFeatureRegistry.register("pink_magnolia_shrub", RuVegetationFeatures.PINK_MAGNOLIA_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> POPPIES = PlacedFeatureRegistry.register("poppies", RuVegetationFeatures.PATCH_POPPIES, NoiseThresholdCountPlacement.of(-0.8D, 5, 14), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> PRAIRIE_FLOWERS = PlacedFeatureRegistry.register("prairie_flowers", RuVegetationFeatures.PATCH_PRAIRIE_FLOWERS, List.of(RarityFilter.onAverageOnceEvery(16), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> PRAIRIE_TREES = PlacedFeatureRegistry.register("prairie_trees", RuVegetationFeatures.PRAIRIE_TREE_MIX, NoiseBasedCountPlacement.of(60, 30.0D, -0.5D), InSquarePlacement.spread(), SurfaceWaterDepthFilter.forMaxDepth(0), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, BlockPredicateFilter.forPredicate(PlacedFeatureRegistry.onGrassBlockPredicate), BiomeFilter.biome());
    public static final Holder<PlacedFeature> PRISMOSS_SPROUT = PlacedFeatureRegistry.register("prismoss_sprout", RuVegetationFeatures.PATCH_PRISMOSS_SPROUT, List.of(CountOnEveryLayerPlacement.of(25), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> PURPLE_CONEFLOWER = PlacedFeatureRegistry.register("purple_coneflower", RuVegetationFeatures.PATCH_PURPLE_CONEFLOWER, NoiseThresholdCountPlacement.of(-0.8D, 5, 10), RarityFilter.onAverageOnceEvery(12), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> RARE_SALMONBERRY_BUSH = PlacedFeatureRegistry.register("rare_salmonberry_bush", RuVegetationFeatures.PATCH_SALMONBERRY_BUSH, RarityFilter.onAverageOnceEvery(64), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome());
    public static final Holder<PlacedFeature> REDSTONE_BUD = PlacedFeatureRegistry.register("redstone_bud", RuVegetationFeatures.PATCH_REDSTONE_BUD, List.of(CountPlacement.of(255), InSquarePlacement.spread(), PlacementUtils.RANGE_BOTTOM_TO_MAX_TERRAIN_HEIGHT, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> REDSTONE_BULB = PlacedFeatureRegistry.register("redstone_bulb", RuVegetationFeatures.PATCH_REDSTONE_BULB, List.of(CountPlacement.of(64), InSquarePlacement.spread(), PlacementUtils.RANGE_BOTTOM_TO_MAX_TERRAIN_HEIGHT, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> REDWOODS_VEGETATION = PlacedFeatureRegistry.register("redwoods_vegetation", RuVegetationFeatures.PATCH_REDWOODS_VEGETATION, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 14), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> REDWOOD_SHRUB = PlacedFeatureRegistry.register("redwood_shrub", RuVegetationFeatures.REDWOOD_SHRUB, CountPlacement.of(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> RED_MAPLE_LEAF_PILE = PlacedFeatureRegistry.register("red_maple_leaf_pile", RuVegetationFeatures.PATCH_RED_MAPLE_LEAF_PILE, NoiseThresholdCountPlacement.of(-0.8D, 5, 24), RarityFilter.onAverageOnceEvery(10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> RED_MAPLE_SHRUB = PlacedFeatureRegistry.register("red_maple_shrub", RuVegetationFeatures.RED_MAPLE_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> SANDY_GRASS = PlacedFeatureRegistry.register("sandy_grass", RuVegetationFeatures.SANDY_GRASS, CountPlacement.of(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BlockPredicateFilter.forPredicate(BlockPredicate.ONLY_IN_AIR_PREDICATE), BiomeFilter.biome());
    public static final Holder<PlacedFeature> SANDY_GRASS_VEGETATION = PlacedFeatureRegistry.register("sandy_grass_vegetation", RuVegetationFeatures.PATCH_SANDY_GRASS_VEGETATION, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 12), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> SHRUBLAND_FLOWERS = PlacedFeatureRegistry.register("shrubland_flowers", RuVegetationFeatures.PATCH_SHRUBLAND_FLOWERS, List.of(RarityFilter.onAverageOnceEvery(12), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> SHRUBLAND_VEGETATION = PlacedFeatureRegistry.register("shrubland_vegetation", RuVegetationFeatures.PATCH_SHRUBLAND_VEGETATION, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> SILVER_BIRCH_LEAF_PILE_DENSE = PlacedFeatureRegistry.register("silver_birch_leaf_pile_dense", RuVegetationFeatures.PATCH_SILVER_BIRCH_LEAF_PILE, NoiseThresholdCountPlacement.of(-0.8D, 5, 15), RarityFilter.onAverageOnceEvery(5), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> SILVER_BIRCH_LEAF_PILE_SPARSE = PlacedFeatureRegistry.register("silver_birch_leaf_pile_sparse", RuVegetationFeatures.PATCH_SILVER_BIRCH_LEAF_PILE, NoiseThresholdCountPlacement.of(-0.8D, 5, 24), RarityFilter.onAverageOnceEvery(10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> SILVER_BIRCH_SHRUB = PlacedFeatureRegistry.register("silver_birch_shrub", RuVegetationFeatures.SILVER_BIRCH_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> SMALL_FLOWERS = PlacedFeatureRegistry.register("small_flowers", RuVegetationFeatures.PATCH_SMALL_FLOWERS, NoiseThresholdCountPlacement.of(-0.8D, 5, 6), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> SNOWBELLE = PlacedFeatureRegistry.register("snowbelle", RuVegetationFeatures.WHITE_SNOWBELLE, CountPlacement.of(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> SNOW_GRASS = PlacedFeatureRegistry.register("snow_grass", RuVegetationFeatures.PATCH_SNOW_GRASS, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 7), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> SOCOTRA_SHRUB = PlacedFeatureRegistry.register("socotra_shrub", RuVegetationFeatures.SOCOTRA_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> SOCOTRA_VEGETATION = PlacedFeatureRegistry.register("socotra_vegetation", RuVegetationFeatures.PATCH_SOCOTRA_VEGETATION, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 24), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> SPARSE_ORANGE_CONEFLOWER = PlacedFeatureRegistry.register("sparse_orange_coneflower", RuVegetationFeatures.PATCH_ORANGE_CONEFLOWER, NoiseThresholdCountPlacement.of(-0.8D, 5, 10), RarityFilter.onAverageOnceEvery(32), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> SPRUCE_SHRUB = PlacedFeatureRegistry.register("spruce_shrub", RuVegetationFeatures.SPRUCE_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> STEPPE_VEGETATION = PlacedFeatureRegistry.register("steppe_vegetation", RuVegetationFeatures.PATCH_STEPPE_VEGETATION, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 24), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> STONE_BUD_DENSE = PlacedFeatureRegistry.register("stone_bud_dense", RuVegetationFeatures.PATCH_STONE_BUD, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 12), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> STONE_BUD_SPARSE = PlacedFeatureRegistry.register("stone_bud_sparse", RuVegetationFeatures.PATCH_STONE_BUD, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 6), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> TALL_FLOWERS = PlacedFeatureRegistry.register("tall_flowers", RuVegetationFeatures.PATCH_TALL_FLOWERS, RarityFilter.onAverageOnceEvery(5), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> TALL_GRASS = PlacedFeatureRegistry.register("tall_grass", RuVegetationFeatures.PATCH_TALL_GRASS, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 7), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> TASSEL_DENSE = PlacedFeatureRegistry.register("tassel_dense", RuVegetationFeatures.TASSEL, CountPlacement.of(8), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> TASSEL_SPARSE = PlacedFeatureRegistry.register("tassel_sparse", RuVegetationFeatures.TASSEL, CountPlacement.of(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> TSUBAKI = PlacedFeatureRegistry.register("tsubaki", RuVegetationFeatures.PATCH_TSUBAKI, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> TULIPS = PlacedFeatureRegistry.register("tulips", RuVegetationFeatures.PATCH_TULIPS, List.of(RarityFilter.onAverageOnceEvery(12), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> WARATAH = PlacedFeatureRegistry.register("waratah", RuVegetationFeatures.PATCH_WARATAH, List.of(RarityFilter.onAverageOnceEvery(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> WHITE_MAGNOLIA_FLOWERS = PlacedFeatureRegistry.register("white_magnolia_flowers", RuVegetationFeatures.WHITE_MAGNOLIA_FLOWERS, CountPlacement.of(15), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, BiomeFilter.biome());
    public static final Holder<PlacedFeature> WHITE_MAGNOLIA_SHRUB = PlacedFeatureRegistry.register("white_magnolia_shrub", RuVegetationFeatures.WHITE_MAGNOLIA_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> WHITE_TRILLIUM = PlacedFeatureRegistry.register("white_trillium", RuVegetationFeatures.PATCH_WHITE_TRILLIUM, List.of(RarityFilter.onAverageOnceEvery(12), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> WILLOW_CYPRESS_SHRUB_MIX = PlacedFeatureRegistry.register("willow_cypress_shrub_mix", RuVegetationFeatures.WILLOW_CYPRESS_SHRUB_MIX, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> WILLOW_FLOWERS = PlacedFeatureRegistry.register("willow_flowers", RuVegetationFeatures.PATCH_WILLOW_FLOWERS, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> WILLOW_MAGNOLIA_SHRUB_MIX = PlacedFeatureRegistry.register("willow_magnolia_shrub_mix", RuVegetationFeatures.WILLOW_MAGNOLIA_SHRUB_MIX, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> WILLOW_SHRUB = PlacedFeatureRegistry.register("willow_shrub", RuVegetationFeatures.WILLOW_SHRUB, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome());
    public static final Holder<PlacedFeature> WILTING_TRILLIUM = PlacedFeatureRegistry.register("wilting_trillium", RuVegetationFeatures.PATCH_WILTING_TRILLIUM, List.of(RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> WINDSWEPT_GRASS = PlacedFeatureRegistry.register("windswept_grass", RuVegetationFeatures.PATCH_WINDSWEPT_GRASS, List.of(NoiseThresholdCountPlacement.of(-0.8D, 5, 6), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome()));
}
