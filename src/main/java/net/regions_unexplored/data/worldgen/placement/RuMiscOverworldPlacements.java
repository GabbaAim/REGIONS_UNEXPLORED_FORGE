package net.regions_unexplored.data.worldgen.placement;

import net.minecraft.core.Direction;
import net.minecraft.core.Holder;
import net.minecraft.data.worldgen.placement.PlacementUtils;
import net.minecraft.util.valueproviders.ClampedNormalInt;
import net.minecraft.util.valueproviders.ConstantInt;
import net.minecraft.util.valueproviders.UniformInt;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.levelgen.VerticalAnchor;
import net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate;
import net.minecraft.world.level.levelgen.placement.*;
import net.minecraft.world.level.material.Fluids;
import net.regions_unexplored.block.RuBlocks;
import net.regions_unexplored.data.worldgen.features.RuMiscOverworldFeatures;
import net.regions_unexplored.registry.PlacedFeatureRegistry;

import java.util.List;

public class RuMiscOverworldPlacements {
    //-----------------------KEYS-----------------------//
    public static final Holder<PlacedFeature> ASH_VENT = PlacedFeatureRegistry.register("ash_vent", RuMiscOverworldFeatures.ASH_VENT, List.of(CountOnEveryLayerPlacement.of(7), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> BASALT_BLOB = PlacedFeatureRegistry.register("basalt_blob", RuMiscOverworldFeatures.BASALT_BLOB, CountOnEveryLayerPlacement.of(4), BiomeFilter.biome());
    public static final Holder<PlacedFeature> DISK_CLAY = PlacedFeatureRegistry.register("disk_clay", RuMiscOverworldFeatures.DISK_CLAY, InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_TOP_SOLID, BlockPredicateFilter.forPredicate(BlockPredicate.matchesFluids(Fluids.WATER)), BiomeFilter.biome());
    public static final Holder<PlacedFeature> DISK_GRAVEL = PlacedFeatureRegistry.register("disk_gravel", RuMiscOverworldFeatures.DISK_GRAVEL, InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_TOP_SOLID, BlockPredicateFilter.forPredicate(BlockPredicate.matchesFluids(Fluids.WATER)), BiomeFilter.biome());
    public static final Holder<PlacedFeature> DISK_SAND = PlacedFeatureRegistry.register("disk_sand", RuMiscOverworldFeatures.DISK_SAND, CountPlacement.of(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_TOP_SOLID, BlockPredicateFilter.forPredicate(BlockPredicate.matchesFluids(Fluids.WATER)), BiomeFilter.biome());
    public static final Holder<PlacedFeature> FALLEN_LARCH_TREE = PlacedFeatureRegistry.register("fallen_larch_tree", RuMiscOverworldFeatures.FALLEN_LARCH_TREE, List.of(RarityFilter.onAverageOnceEvery(3), InSquarePlacement.spread(), SurfaceWaterDepthFilter.forMaxDepth(0), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> FALLEN_MAPLE_TREE = PlacedFeatureRegistry.register("fallen_maple_tree", RuMiscOverworldFeatures.FALLEN_MAPLE_TREE, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), SurfaceWaterDepthFilter.forMaxDepth(0), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> FALLEN_OAK_TREE_DENSE = PlacedFeatureRegistry.register("fallen_oak_tree_dense", RuMiscOverworldFeatures.FALLEN_OAK_TREE_WITH_BLOB, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), SurfaceWaterDepthFilter.forMaxDepth(0), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> FALLEN_OAK_TREE_SPARSE = PlacedFeatureRegistry.register("fallen_oak_tree_sparse", RuMiscOverworldFeatures.FALLEN_OAK_TREE, List.of(RarityFilter.onAverageOnceEvery(6), InSquarePlacement.spread(), SurfaceWaterDepthFilter.forMaxDepth(0), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> FALLEN_PINE_TREE = PlacedFeatureRegistry.register("fallen_pine_tree", RuMiscOverworldFeatures.FALLEN_PINE_TREE, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), SurfaceWaterDepthFilter.forMaxDepth(0), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> FALLEN_PINE_TREE_ON_DIRT = PlacedFeatureRegistry.register("fallen_pine_tree_on_dirt", RuMiscOverworldFeatures.FALLEN_PINE_TREE, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), SurfaceWaterDepthFilter.forMaxDepth(0), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, BlockPredicateFilter.forPredicate(PlacedFeatureRegistry.onDirtPredicate), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> FALLEN_PINE_TREE_ON_SNOW = PlacedFeatureRegistry.register("fallen_pine_tree_on_snow", RuMiscOverworldFeatures.FALLEN_SNOW_PINE_TREE, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), SurfaceWaterDepthFilter.forMaxDepth(0), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, BlockPredicateFilter.forPredicate(PlacedFeatureRegistry.onSnowPredicate), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> FALLEN_SILVER_BIRCH_TREE = PlacedFeatureRegistry.register("fallen_silver_birch_tree", RuMiscOverworldFeatures.FALLEN_SILVER_BIRCH_TREE, List.of(RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), SurfaceWaterDepthFilter.forMaxDepth(0), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> HANGING_PRISMARITE_CLUSTER = PlacedFeatureRegistry.register("hanging_prismarite_cluster", RuMiscOverworldFeatures.HANGING_PRISMARITE_CLUSTER, CountPlacement.of(UniformInt.of(78, 126)), InSquarePlacement.spread(), PlacementUtils.RANGE_BOTTOM_TO_MAX_TERRAIN_HEIGHT, BiomeFilter.biome());
    public static final Holder<PlacedFeature> ICICLE_UP = PlacedFeatureRegistry.register("icicle_up", RuMiscOverworldFeatures.ICICLE_UP, List.of(CountPlacement.of(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BlockPredicateFilter.forPredicate(PlacedFeatureRegistry.onSnowPredicate), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> LARGE_POINTED_REDSTONE = PlacedFeatureRegistry.register("large_pointed_redstone", RuMiscOverworldFeatures.LARGE_POINTED_REDSTONE, CountPlacement.of(UniformInt.of(10, 48)), InSquarePlacement.spread(), PlacementUtils.RANGE_BOTTOM_TO_MAX_TERRAIN_HEIGHT, BiomeFilter.biome());
    public static final Holder<PlacedFeature> LAVA_FALL = PlacedFeatureRegistry.register("lava_fall", RuMiscOverworldFeatures.LAVA_FALL, List.of(CountOnEveryLayerPlacement.of(6), InSquarePlacement.spread(), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> MARSH = PlacedFeatureRegistry.register("marsh", RuMiscOverworldFeatures.MARSH, CountPlacement.of(10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE, BiomeFilter.biome());
    public static final Holder<PlacedFeature> MEADOW_ROCK = PlacedFeatureRegistry.register("meadow_rock", RuMiscOverworldFeatures.MEADOW_ROCK, List.of(CountPlacement.of(1), InSquarePlacement.spread(), SurfaceWaterDepthFilter.forMaxDepth(0), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> MINERAL_POOL = PlacedFeatureRegistry.register("mineral_pool", RuMiscOverworldFeatures.MINERAL_POOL, CountPlacement.of(70), InSquarePlacement.spread(), PlacementUtils.RANGE_BOTTOM_TO_MAX_TERRAIN_HEIGHT, EnvironmentScanPlacement.scanningFor(Direction.DOWN, BlockPredicate.solid(), BlockPredicate.ONLY_IN_AIR_PREDICATE, 12), RandomOffsetPlacement.vertical(ConstantInt.of(1)), BiomeFilter.biome());
    public static final Holder<PlacedFeature> MOSS_PATCH_WITH_WATER = PlacedFeatureRegistry.register("moss_patch_with_water", RuMiscOverworldFeatures.MOSS_PATCH_WITH_WATER, CountPlacement.of(1), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_TOP_SOLID, EnvironmentScanPlacement.scanningFor(Direction.DOWN, BlockPredicate.solid(), BlockPredicate.ONLY_IN_AIR_PREDICATE, 12), RandomOffsetPlacement.vertical(ConstantInt.of(1)), BiomeFilter.biome());
    public static final Holder<PlacedFeature> MOSS_PATCH_WITH_WATER_RARE = PlacedFeatureRegistry.register("moss_patch_with_water_rare", RuMiscOverworldFeatures.MOSS_PATCH_WITH_WATER, RarityFilter.onAverageOnceEvery(4), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_TOP_SOLID, EnvironmentScanPlacement.scanningFor(Direction.DOWN, BlockPredicate.solid(), BlockPredicate.ONLY_IN_AIR_PREDICATE, 12), RandomOffsetPlacement.vertical(ConstantInt.of(1)), BiomeFilter.biome());
    public static final Holder<PlacedFeature> MOSS_PATCH_WITH_WATER_UNCOMMON = PlacedFeatureRegistry.register("moss_patch_with_water_uncommon", RuMiscOverworldFeatures.MOSS_PATCH_WITH_WATER, RarityFilter.onAverageOnceEvery(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_TOP_SOLID, EnvironmentScanPlacement.scanningFor(Direction.DOWN, BlockPredicate.solid(), BlockPredicate.ONLY_IN_AIR_PREDICATE, 12), RandomOffsetPlacement.vertical(ConstantInt.of(1)), BiomeFilter.biome());
    public static final Holder<PlacedFeature> NOISE_BUSH = PlacedFeatureRegistry.register("noise_bush", RuMiscOverworldFeatures.PATCH_NOISE_BUSH, List.of(CountPlacement.of(15), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> NOISE_PUMPKINS = PlacedFeatureRegistry.register("noise_pumpkins", RuMiscOverworldFeatures.PATCH_NOISE_PUMPKINS, List.of(CountPlacement.of(18), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> NOISE_ROCKS = PlacedFeatureRegistry.register("noise_rocks", RuMiscOverworldFeatures.PATCH_NOISE_ROCKS, List.of(CountPlacement.of(15), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome()));
    public static final Holder<PlacedFeature> ORE_REDSTONE_LARGE = PlacedFeatureRegistry.register("ore_redstone_large", RuMiscOverworldFeatures.ORE_REDSTONE_LARGE, commonOrePlacement(16, HeightRangePlacement.triangle(VerticalAnchor.bottom(), VerticalAnchor.absolute(112))));
    public static final Holder<PlacedFeature> OVERWORLD_LAVA_DELTA = PlacedFeatureRegistry.register("overworld_lava_delta", RuMiscOverworldFeatures.OVERWORLD_LAVA_DELTA, CountPlacement.of(115), InSquarePlacement.spread(), PlacementUtils.RANGE_BOTTOM_TO_MAX_TERRAIN_HEIGHT, EnvironmentScanPlacement.scanningFor(Direction.DOWN, BlockPredicate.solid(), BlockPredicate.ONLY_IN_AIR_PREDICATE, 12), RandomOffsetPlacement.vertical(ConstantInt.of(1)), BiomeFilter.biome());
    public static final Holder<PlacedFeature> POINTED_REDSTONE = PlacedFeatureRegistry.register("pointed_redstone", RuMiscOverworldFeatures.POINTED_REDSTONE, CountPlacement.of(UniformInt.of(192, 256)), InSquarePlacement.spread(), PlacementUtils.RANGE_BOTTOM_TO_MAX_TERRAIN_HEIGHT, CountPlacement.of(UniformInt.of(1, 5)), RandomOffsetPlacement.of(ClampedNormalInt.of(0.0F, 3.0F, -10, 10), ClampedNormalInt.of(0.0F, 0.6F, -2, 2)), BiomeFilter.biome());
    public static final Holder<PlacedFeature> POINTED_REDSTONE_CLUSTER = PlacedFeatureRegistry.register("pointed_redstone_cluster", RuMiscOverworldFeatures.POINTED_REDSTONE_CLUSTER, CountPlacement.of(UniformInt.of(78, 126)), InSquarePlacement.spread(), PlacementUtils.RANGE_BOTTOM_TO_MAX_TERRAIN_HEIGHT, BiomeFilter.biome());
    public static final Holder<PlacedFeature> PRISMARITE_CLUSTERS = PlacedFeatureRegistry.register("prismarite_clusters", RuMiscOverworldFeatures.PRISMARITE_CLUSTERS, List.of(CountOnEveryLayerPlacement.of(8), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> REDWOODS_ROCK = PlacedFeatureRegistry.register("redwoods_rock", RuMiscOverworldFeatures.REDWOODS_ROCK, CountPlacement.of(2), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP, BiomeFilter.biome());
    public static final Holder<PlacedFeature> ROCK = PlacedFeatureRegistry.register("rock", RuMiscOverworldFeatures.ROCK, List.of(CountPlacement.of(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, PlacementUtils.filteredByBlockSurvival(Blocks.OAK_SAPLING), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> ROCK_ON_GRAVEL = PlacedFeatureRegistry.register("rock_on_gravel", RuMiscOverworldFeatures.ROCK, List.of(CountPlacement.of(3), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, PlacementUtils.filteredByBlockSurvival(RuBlocks.STONE_BUD.get()), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> ROCK_ON_SNOW = PlacedFeatureRegistry.register("rock_on_snow", RuMiscOverworldFeatures.ROCK, List.of(CountPlacement.of(1), InSquarePlacement.spread(), SurfaceWaterDepthFilter.forMaxDepth(0), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR, BlockPredicateFilter.forPredicate(PlacedFeatureRegistry.onSnowPredicate), BiomeFilter.biome()));
    public static final Holder<PlacedFeature> SMOULDERING_DIRT = PlacedFeatureRegistry.register("smouldering_dirt", RuMiscOverworldFeatures.SMOULDERING_DIRT, CountPlacement.of(25), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_WORLD_SURFACE,  BiomeFilter.biome());
    public static final Holder<PlacedFeature> WATER_EDGE = PlacedFeatureRegistry.register("water_edge", RuMiscOverworldFeatures.WATER_EDGE, CountPlacement.of(10), InSquarePlacement.spread(), PlacementUtils.HEIGHTMAP_OCEAN_FLOOR,  BiomeFilter.biome());

    private static List<PlacementModifier> orePlacement(PlacementModifier placementModifier, PlacementModifier placementModifier1) {
        return List.of(placementModifier, InSquarePlacement.spread(), placementModifier1, BiomeFilter.biome());
    }

    private static List<PlacementModifier> commonOrePlacement(int i, PlacementModifier placementModifier) {
        return orePlacement(CountPlacement.of(i), placementModifier);
    }
}
