package net.regions_unexplored.data.worldgen.features;

import com.google.common.collect.ImmutableList;
import net.minecraft.core.Direction;
import net.minecraft.core.Holder;
import net.minecraft.core.HolderSet;
import net.minecraft.data.worldgen.features.FeatureUtils;
import net.minecraft.data.worldgen.placement.PlacementUtils;
import net.minecraft.resources.ResourceKey;
import net.minecraft.util.random.SimpleWeightedRandomList;
import net.minecraft.util.valueproviders.ConstantInt;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.MultifaceBlock;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
import net.minecraft.world.level.levelgen.feature.Feature;
import net.minecraft.world.level.levelgen.feature.WeightedPlacedFeature;
import net.minecraft.world.level.levelgen.feature.configurations.*;
import net.minecraft.world.level.levelgen.feature.featuresize.TwoLayersFeatureSize;
import net.minecraft.world.level.levelgen.feature.foliageplacers.BlobFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.NoiseProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.WeightedStateProvider;
import net.minecraft.world.level.levelgen.feature.trunkplacers.StraightTrunkPlacer;
import net.minecraft.world.level.levelgen.synth.NormalNoise;
import net.regions_unexplored.block.RuBlocks;
import net.regions_unexplored.registry.ConfiguredFeatureRegistry;
import net.regions_unexplored.registry.FeatureRegistry;
import net.regions_unexplored.world.features.treedecorators.BlackwoodBioshroom;
import net.regions_unexplored.world.level.block.plant.flower.GroundCoverBlock;
import net.regions_unexplored.world.level.block.plant.food.DuskmelonBlock;
import net.regions_unexplored.world.level.block.plant.food.SalmonBerryBushBlock;
import net.regions_unexplored.world.level.block.plant.grass.AshenGrassBlock;
import net.regions_unexplored.world.level.feature.configuration.ShrubConfiguration;

import java.util.List;

public class RuVegetationFeatures {

    public static final SimpleWeightedRandomList.Builder<BlockState> getMapleLeafBuilder(){
        SimpleWeightedRandomList.Builder<BlockState> mapleLeafPileBuilder = SimpleWeightedRandomList.builder();

        for(int i = 1; i <= 4; ++i) {
            for(Direction direction : Direction.Plane.HORIZONTAL) {
                mapleLeafPileBuilder.add(RuBlocks.MAPLE_LEAF_PILE.get().defaultBlockState().setValue(GroundCoverBlock.AMOUNT, Integer.valueOf(i)).setValue(GroundCoverBlock.FACING, direction), 1);
            }
        }

        return mapleLeafPileBuilder;

    }
    public static final SimpleWeightedRandomList.Builder<BlockState> getRedMapleLeafBuilder(){
        SimpleWeightedRandomList.Builder<BlockState> redMapleLeafPileBuilder = SimpleWeightedRandomList.builder();

        for(int i = 1; i <= 4; ++i) {
            for(Direction direction : Direction.Plane.HORIZONTAL) {
                redMapleLeafPileBuilder.add(RuBlocks.RED_MAPLE_LEAF_PILE.get().defaultBlockState().setValue(GroundCoverBlock.AMOUNT, Integer.valueOf(i)).setValue(GroundCoverBlock.FACING, direction), 1);
            }
        }

        return redMapleLeafPileBuilder;

    }
    public static final SimpleWeightedRandomList.Builder<BlockState> getOrangeMapleLeafBuilder(){
        SimpleWeightedRandomList.Builder<BlockState> orangeMapleLeafPileBuilder = SimpleWeightedRandomList.builder();

        for(int i = 1; i <= 4; ++i) {
            for(Direction direction : Direction.Plane.HORIZONTAL) {
                orangeMapleLeafPileBuilder.add(RuBlocks.ORANGE_MAPLE_LEAF_PILE.get().defaultBlockState().setValue(GroundCoverBlock.AMOUNT, Integer.valueOf(i)).setValue(GroundCoverBlock.FACING, direction), 1);
            }
        }

        return orangeMapleLeafPileBuilder;

    }
    public static final SimpleWeightedRandomList.Builder<BlockState> getSilverBirchLeafBuilder(){
        SimpleWeightedRandomList.Builder<BlockState> silverBirchLeafPileBuilder = SimpleWeightedRandomList.builder();

        for(int i = 1; i <= 4; ++i) {
            for(Direction direction : Direction.Plane.HORIZONTAL) {
                silverBirchLeafPileBuilder.add(RuBlocks.SILVER_BIRCH_LEAF_PILE.get().defaultBlockState().setValue(GroundCoverBlock.AMOUNT, Integer.valueOf(i)).setValue(GroundCoverBlock.FACING, direction), 1);
            }
        }

        return silverBirchLeafPileBuilder;

    }
    public static final SimpleWeightedRandomList.Builder<BlockState> getEnchantedBirchLeafBuilder(){
        SimpleWeightedRandomList.Builder<BlockState> enchantedBirchLeafPileBuilder = SimpleWeightedRandomList.builder();

        for(int i = 1; i <= 4; ++i) {
            for(Direction direction : Direction.Plane.HORIZONTAL) {
                enchantedBirchLeafPileBuilder.add(RuBlocks.ENCHANTED_BIRCH_LEAF_PILE.get().defaultBlockState().setValue(GroundCoverBlock.AMOUNT, Integer.valueOf(i)).setValue(GroundCoverBlock.FACING, direction), 1);
            }
        }

        return enchantedBirchLeafPileBuilder;

    }
    public static final SimpleWeightedRandomList.Builder<BlockState> getOrangeConeflowerBuilder(){
        SimpleWeightedRandomList.Builder<BlockState> orangeConeflowerBuilder = SimpleWeightedRandomList.builder();

        for(int i = 1; i <= 4; ++i) {
            for(Direction direction : Direction.Plane.HORIZONTAL) {
                orangeConeflowerBuilder.add(RuBlocks.ORANGE_CONEFLOWER.get().defaultBlockState().setValue(GroundCoverBlock.AMOUNT, Integer.valueOf(i)).setValue(GroundCoverBlock.FACING, direction), 1);
            }
        }

        return orangeConeflowerBuilder;

    }
    public static final SimpleWeightedRandomList.Builder<BlockState> getPurpleConeflowerBuilder(){
        SimpleWeightedRandomList.Builder<BlockState> purpleConeflowerBuilder = SimpleWeightedRandomList.builder();

        for(int i = 1; i <= 4; ++i) {
            for(Direction direction : Direction.Plane.HORIZONTAL) {
                purpleConeflowerBuilder.add(RuBlocks.PURPLE_CONEFLOWER.get().defaultBlockState().setValue(GroundCoverBlock.AMOUNT, Integer.valueOf(i)).setValue(GroundCoverBlock.FACING, direction), 1);
            }
        }

        return purpleConeflowerBuilder;

    }
    public static final SimpleWeightedRandomList.Builder<BlockState> getCloverBuilder(){
        SimpleWeightedRandomList.Builder<BlockState> cloverBuilder = SimpleWeightedRandomList.builder();

        for(int i = 1; i <= 4; ++i) {
            for(Direction direction : Direction.Plane.HORIZONTAL) {
                cloverBuilder.add(RuBlocks.CLOVER.get().defaultBlockState().setValue(GroundCoverBlock.AMOUNT, Integer.valueOf(i)).setValue(GroundCoverBlock.FACING, direction), 1);
            }
        }

        return cloverBuilder;

    }
    public static final SimpleWeightedRandomList.Builder duskMelon = SimpleWeightedRandomList.builder().add(RuBlocks.DUSKMELON.get().defaultBlockState().setValue(DuskmelonBlock.AGE, 1), 3).add(RuBlocks.DUSKMELON.get().defaultBlockState().setValue(DuskmelonBlock.AGE, 2), 2);

    //-----------------------KEYS-----------------------//
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> ACACIA_SHRUB = ConfiguredFeatureRegistry.register("acacia_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.ACACIA_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> ASHEN_SHRUB = ConfiguredFeatureRegistry.register("ashen_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.ASHEN_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<SimpleBlockConfiguration, ?>> ASTER = ConfiguredFeatureRegistry.register("aster", Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.ASTER.get())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> AUTUMNAL_SHRUB_MIX = ConfiguredFeatureRegistry.register("autumnal_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.MAPLE_SHRUB.get().defaultBlockState(), 2).add(RuBlocks.SILVER_BIRCH_SHRUB.get().defaultBlockState(), 4).add(RuBlocks.RED_MAPLE_SHRUB.get().defaultBlockState(), 4).add(RuBlocks.ORANGE_MAPLE_SHRUB.get().defaultBlockState(), 4))));
    public static final Holder<ConfiguredFeature<ProbabilityFeatureConfiguration, ?>> BAMBOO = ConfiguredFeatureRegistry.register("bamboo", Feature.BAMBOO, new ProbabilityFeatureConfiguration(0.25F));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> BAOBAB_ACACIA_SHRUB_MIX = ConfiguredFeatureRegistry.register("baobab_acacia_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.BAOBAB_SHRUB.get().defaultBlockState(), 2).add(RuBlocks.ACACIA_SHRUB.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> BAOBAB_SHRUB = ConfiguredFeatureRegistry.register("baobab_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.BAOBAB_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<SimpleBlockConfiguration, ?>> BARREL_CACTUS = ConfiguredFeatureRegistry.register("barrel_cactus", Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.BARREL_CACTUS.get())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> BIRCH_SHRUB = ConfiguredFeatureRegistry.register("birch_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.BIRCH_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> BIRCH_SHRUB_MIX = ConfiguredFeatureRegistry.register("birch_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.SILVER_BIRCH_SHRUB.get().defaultBlockState(), 3).add(RuBlocks.BIRCH_SHRUB.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BLACKWOOD_BIOSHROOMS = ConfiguredFeatureRegistry.register("blackwood_bioshrooms", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new StraightTrunkPlacer(2, 1, 0), BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0), 0), new TwoLayersFeatureSize(0, 0, 0)).decorators(ImmutableList.of(BlackwoodBioshroom.INSTANCE)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> BLACKWOOD_DARK_OAK_SHRUB_MIX = ConfiguredFeatureRegistry.register("blackwood_dark_oak_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.BLACKWOOD_SHRUB.get().defaultBlockState(), 3).add(RuBlocks.DARK_OAK_SHRUB.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<SimpleBlockConfiguration, ?>> BLACKWOOD_DECORATION = ConfiguredFeatureRegistry.register("blackwood_decoration", Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.BLUE_BIOSHROOM.get().defaultBlockState(), 3).add(RuBlocks.PINK_BIOSHROOM.get().defaultBlockState(), 3).add(RuBlocks.TALL_BLUE_BIOSHROOM.get().defaultBlockState(), 1).add(RuBlocks.TALL_PINK_BIOSHROOM.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> BLACKWOOD_SHRUB = ConfiguredFeatureRegistry.register("blackwood_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.BLACKWOOD_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<SimpleBlockConfiguration, ?>> BLADED_GRASS_SINGLE = ConfiguredFeatureRegistry.register("bladed_grass_single", Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.BLADED_GRASS.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> CHERRY_SHRUB = ConfiguredFeatureRegistry.register("cherry_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.CHERRY_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<SimpleBlockConfiguration, ?>> CORPSE_FLOWER = ConfiguredFeatureRegistry.register("corpse_flower", Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.CORPSE_FLOWER.get())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> CYPRESS_SHRUB = ConfiguredFeatureRegistry.register("cypress_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.CYPRESS_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> DARK_OAK_SHRUB = ConfiguredFeatureRegistry.register("dark_oak_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.DARK_OAK_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<SimpleBlockConfiguration, ?>> DAY_LILY = ConfiguredFeatureRegistry.register("day_lily", Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.DAY_LILY.get())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> DEAD_PINE_SHRUB = ConfiguredFeatureRegistry.register("dead_pine_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.DEAD_PINE_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> DEAD_SHRUB = ConfiguredFeatureRegistry.register("dead_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.DEAD_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> DEAD_SHRUB_MIX = ConfiguredFeatureRegistry.register("dead_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.DEAD_SHRUB.get().defaultBlockState(), 2).add(RuBlocks.DEAD_PINE_SHRUB.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> DROPLEAF = ConfiguredFeatureRegistry.register("dropleaf", FeatureRegistry.DROPLEAF.get(), FeatureConfiguration.NONE);
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> DUCKWEED = ConfiguredFeatureRegistry.register("duckweed", Feature.RANDOM_PATCH, new RandomPatchConfiguration(10, 7, 3, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.DUCKWEED.get())))));
    public static final Holder<ConfiguredFeature<SimpleBlockConfiguration, ?>> DUSKMELON = ConfiguredFeatureRegistry.register("duskmelon", Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(duskMelon)));
    public static final Holder<ConfiguredFeature<SimpleBlockConfiguration, ?>> DUSKTRAP = ConfiguredFeatureRegistry.register("dusktrap", Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.DUSKTRAP.get())));
    public static final Holder<ConfiguredFeature<SimpleBlockConfiguration, ?>> ELEPHANT_EAR = ConfiguredFeatureRegistry.register("elephant_ear", Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.ELEPHANT_EAR.get())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> EUCALYPTUS_SHRUB = ConfiguredFeatureRegistry.register("eucalyptus_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.EUCALYPTUS_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWERING_LILY = ConfiguredFeatureRegistry.register("flowering_lily", Feature.RANDOM_PATCH, new RandomPatchConfiguration(10, 7, 3, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.FLOWERING_LILY_PAD.get())))));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> FLOWERING_SHRUB = ConfiguredFeatureRegistry.register("flowering_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.FLOWERING_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> GIANT_LILY = ConfiguredFeatureRegistry.register("giant_lily", FeatureRegistry.GIANT_LILY.get(), FeatureConfiguration.NONE);
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> GOLDEN_LARCH_SHRUB = ConfiguredFeatureRegistry.register("golden_larch_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.GOLDEN_LARCH_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> GOLDEN_LARCH_SHRUB_MIX = ConfiguredFeatureRegistry.register("golden_larch_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.LARCH_SHRUB.get().defaultBlockState(), 1).add(RuBlocks.GOLDEN_LARCH_SHRUB.get().defaultBlockState(), 3))));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> JOSHUA_SHRUB = ConfiguredFeatureRegistry.register("joshua_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.JOSHUA_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> JUNGLE_SHRUB = ConfiguredFeatureRegistry.register("jungle_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.JUNGLE_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> LARCH_SHRUB = ConfiguredFeatureRegistry.register("larch_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.LARCH_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> LARCH_SHRUB_MIX = ConfiguredFeatureRegistry.register("larch_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.LARCH_SHRUB.get().defaultBlockState(), 3).add(RuBlocks.GOLDEN_LARCH_SHRUB.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> MAGNOLIA_SHRUB = ConfiguredFeatureRegistry.register("magnolia_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.MAGNOLIA_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> MAGNOLIA_SHRUB_MIX = ConfiguredFeatureRegistry.register("magnolia_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.MAGNOLIA_SHRUB.get().defaultBlockState(), 1).add(RuBlocks.PINK_MAGNOLIA_SHRUB.get().defaultBlockState(), 1).add(RuBlocks.WHITE_MAGNOLIA_SHRUB.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> MANGROVE_SHRUB = ConfiguredFeatureRegistry.register("mangrove_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.MANGROVE_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> MAPLE_SHRUB = ConfiguredFeatureRegistry.register("maple_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.MAPLE_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> MAPLE_SHRUB_MIX = ConfiguredFeatureRegistry.register("maple_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.MAPLE_SHRUB.get().defaultBlockState(), 4).add(RuBlocks.RED_MAPLE_SHRUB.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> MAUVE_ENCHANTED_SHRUB_MIX = ConfiguredFeatureRegistry.register("mauve_enchanted_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.MAUVE_SHRUB.get().defaultBlockState(), 3).add(RuBlocks.ENCHANTED_BIRCH_SHRUB.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> MAUVE_SHRUB = ConfiguredFeatureRegistry.register("mauve_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.MAUVE_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<SimpleBlockConfiguration, ?>> MEADOW_SAGE = ConfiguredFeatureRegistry.register("meadow_sage", Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.MEADOW_SAGE.get())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> OAK_SHRUB = ConfiguredFeatureRegistry.register("oak_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.OAK_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> ORANGE_MAPLE_SHRUB = ConfiguredFeatureRegistry.register("orange_maple_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.ORANGE_MAPLE_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> PALM_JUNGLE_SHRUB_MIX = ConfiguredFeatureRegistry.register("palm_jungle_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.PALM_SHRUB.get().defaultBlockState(), 5).add(RuBlocks.JUNGLE_SHRUB.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> PALM_SHRUB = ConfiguredFeatureRegistry.register("palm_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.PALM_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_ALPHA_DANDELION = ConfiguredFeatureRegistry.register("patch_alpha_dandelion", Feature.FLOWER, new RandomPatchConfiguration(96, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.ALPHA_DANDELION.get().defaultBlockState())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_ALPHA_ROSE = ConfiguredFeatureRegistry.register("patch_alpha_rose", Feature.FLOWER, new RandomPatchConfiguration(96, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.ALPHA_ROSE.get().defaultBlockState())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_ASHEN_GRASS = ConfiguredFeatureRegistry.register("patch_ashen_grass", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.ASHEN_GRASS.get().defaultBlockState(), 4).add(RuBlocks.ASHEN_GRASS.get().defaultBlockState().setValue(AshenGrassBlock.SMOULDERING, true), 1)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_AZURE_DAISY = ConfiguredFeatureRegistry.register("patch_azure_daisy", Feature.FLOWER, new RandomPatchConfiguration(32, 4, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.AZURE_BLUET.defaultBlockState(), 1).add(Blocks.OXEYE_DAISY.defaultBlockState(), 1).add(RuBlocks.FELICIA_DAISY.get().defaultBlockState(), 2))))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BARLEY = ConfiguredFeatureRegistry.register("patch_barley", Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.BARLEY.get()))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BAYOU_VEGETATION = ConfiguredFeatureRegistry.register("patch_bayou_vegetation", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.FERN.defaultBlockState(), 30).add(Blocks.GRASS.defaultBlockState(), 15).add(Blocks.TALL_GRASS.defaultBlockState(), 3)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BLACKWOOD_VEGETATION = ConfiguredFeatureRegistry.register("patch_blackwood_vegetation", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.FERN.defaultBlockState(), 15).add(Blocks.GRASS.defaultBlockState(), 20).add(Blocks.TALL_GRASS.defaultBlockState(), 10).add(Blocks.LARGE_FERN.defaultBlockState(), 1)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BLADED_GRASS = ConfiguredFeatureRegistry.register("patch_bladed_grass", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.BLADED_GRASS.get().defaultBlockState(), 4).add(RuBlocks.BLADED_TALL_GRASS.get().defaultBlockState(), 1).add(Blocks.GRASS.defaultBlockState(), 4)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BLUE_BIOSHROOM = ConfiguredFeatureRegistry.register("patch_blue_bioshroom", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.TALL_BLUE_BIOSHROOM.get().defaultBlockState(), 1).add(RuBlocks.BLUE_BIOSHROOM.get().defaultBlockState(), 10)), 16));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_CAVE_HYSSOP = ConfiguredFeatureRegistry.register("patch_cave_hyssop", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RuBlocks.CAVE_HYSSOP.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_CLOVER = ConfiguredFeatureRegistry.register("patch_clover", Feature.RANDOM_PATCH, new RandomPatchConfiguration(96, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(getCloverBuilder())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_DAISIES = ConfiguredFeatureRegistry.register("patch_daisies", Feature.FLOWER, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.DAISY.get().defaultBlockState(), 1).add(RuBlocks.FELICIA_DAISY.get().defaultBlockState(), 1)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_DAISY = ConfiguredFeatureRegistry.register("patch_daisy", Feature.FLOWER, new RandomPatchConfiguration(8, 1, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.DAISY.get())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_DECIDUOUS_VEGETATION = ConfiguredFeatureRegistry.register("patch_deciduous_vegetation", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.FERN.defaultBlockState(), 30).add(Blocks.GRASS.defaultBlockState(), 15).add(Blocks.TALL_GRASS.defaultBlockState(), 10).add(Blocks.LARGE_FERN.defaultBlockState(), 3)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_DIRT_VEGETATION = ConfiguredFeatureRegistry.register("patch_dirt_vegetation", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.FERN.defaultBlockState(), 30).add(Blocks.GRASS.defaultBlockState(), 5).add(Blocks.LARGE_FERN.defaultBlockState(), 3)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_ENCHANTED_BIRCH_LEAF_PILE = ConfiguredFeatureRegistry.register("patch_enchanted_birch_leaf_pile", Feature.RANDOM_PATCH, new RandomPatchConfiguration(96, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(getEnchantedBirchLeafBuilder())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_FEN_VEGETATION = ConfiguredFeatureRegistry.register("patch_fen_vegetation", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.FERN.defaultBlockState(), 30).add(Blocks.GRASS.defaultBlockState(), 15).add(Blocks.TALL_GRASS.defaultBlockState(), 10).add(Blocks.LARGE_FERN.defaultBlockState(), 5)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_FERNS = ConfiguredFeatureRegistry.register("patch_ferns", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.FERN.defaultBlockState(), 10).add(Blocks.FERN.defaultBlockState(), 1)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_FROZEN_FLOWERS = ConfiguredFeatureRegistry.register("patch_frozen_flowers", Feature.FLOWER, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.BLEEDING_HEART.get().defaultBlockState(), 3).add(Blocks.LILY_OF_THE_VALLEY.defaultBlockState(), 2)))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_GRASS = ConfiguredFeatureRegistry.register("patch_grass", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.GRASS.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_GRASS_VEGETATION = ConfiguredFeatureRegistry.register("patch_grass_vegetation", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.FERN.defaultBlockState(), 7).add(Blocks.GRASS.defaultBlockState(), 15).add(Blocks.TALL_GRASS.defaultBlockState(), 2)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_GREEN_BIOSHROOM = ConfiguredFeatureRegistry.register("patch_green_bioshroom", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.TALL_GREEN_BIOSHROOM.get().defaultBlockState(), 1).add(RuBlocks.GREEN_BIOSHROOM.get().defaultBlockState(), 10)), 16));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_HIBISCUS = ConfiguredFeatureRegistry.register("patch_hibiscus", Feature.FLOWER, new RandomPatchConfiguration(14, 1, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.HIBISCUS.get())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_HYSSOP = ConfiguredFeatureRegistry.register("patch_hyssop", Feature.FLOWER, new RandomPatchConfiguration(16, 1, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.HYSSOP.get())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_JOSHUA_VEGETATION = ConfiguredFeatureRegistry.register("patch_joshua_vegetation", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.GRASS.defaultBlockState(), 10).add(RuBlocks.SANDY_GRASS.get().defaultBlockState(), 8).add(RuBlocks.SMALL_DESERT_SHRUB.get().defaultBlockState(), 10)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_LUPINE_VEGETATION = ConfiguredFeatureRegistry.register("patch_lupine_vegetation", Feature.FLOWER, new RandomPatchConfiguration(96, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.YELLOW_LUPINE.get().defaultBlockState(), 1).add(RuBlocks.RED_LUPINE.get().defaultBlockState(), 1).add(RuBlocks.BLUE_LUPINE.get().defaultBlockState(), 10).add(RuBlocks.PINK_LUPINE.get().defaultBlockState(), 10).add(RuBlocks.PURPLE_LUPINE.get().defaultBlockState(), 10))))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_MALLOW = ConfiguredFeatureRegistry.register("patch_mallow", Feature.FLOWER, new RandomPatchConfiguration(16, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.MALLOW.get())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_MAPLE_LEAF_PILE = ConfiguredFeatureRegistry.register("patch_maple_leaf_pile", Feature.RANDOM_PATCH, new RandomPatchConfiguration(96, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(getMapleLeafBuilder())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_MEADOW_VEGETATION = ConfiguredFeatureRegistry.register("patch_meadow_vegetation", Feature.FLOWER, new RandomPatchConfiguration(96, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.HYSSOP.get().defaultBlockState(), 20).add(RuBlocks.FIREWEED.get().defaultBlockState(), 15).add(RuBlocks.DAISY.get().defaultBlockState(), 10).add(Blocks.GRASS.defaultBlockState(), 40))))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_MEDIUM_GRASS = ConfiguredFeatureRegistry.register("patch_medium_grass", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RuBlocks.MEDIUM_GRASS.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_MOUNTAIN_VEGETATION = ConfiguredFeatureRegistry.register("patch_mountain_vegetation", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.FERN.defaultBlockState(), 30).add(Blocks.LARGE_FERN.defaultBlockState(), 15).add(Blocks.GRASS.defaultBlockState(), 20).add(Blocks.TALL_GRASS.defaultBlockState(), 5)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_ORANGE_CONEFLOWER = ConfiguredFeatureRegistry.register("patch_orange_coneflower", Feature.FLOWER, new RandomPatchConfiguration(96, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(getOrangeConeflowerBuilder())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_ORANGE_MAPLE_LEAF_PILE = ConfiguredFeatureRegistry.register("patch_orange_maple_leaf_pile", Feature.RANDOM_PATCH, new RandomPatchConfiguration(96, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(getOrangeMapleLeafBuilder())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_OUTBACK_VEGETATION = ConfiguredFeatureRegistry.register("patch_outback_vegetation", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.STEPPE_GRASS.get().defaultBlockState(), 10).add(Blocks.GRASS.defaultBlockState(), 10).add(RuBlocks.DEAD_STEPPE_SHRUB.get().defaultBlockState(), 5).add(RuBlocks.SMALL_DESERT_SHRUB.get().defaultBlockState(), 10)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_PINK_BIOSHROOM = ConfiguredFeatureRegistry.register("patch_pink_bioshroom", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.TALL_PINK_BIOSHROOM.get().defaultBlockState(), 1).add(RuBlocks.PINK_BIOSHROOM.get().defaultBlockState(), 8)), 16));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_PINK_FLOWERS = ConfiguredFeatureRegistry.register("patch_pink_flowers", Feature.FLOWER, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.FIREWEED.get().defaultBlockState(), 3).add(RuBlocks.TSUBAKI.get().defaultBlockState(), 2).add(RuBlocks.PINK_LUPINE.get().defaultBlockState(), 3).add(Blocks.PINK_TULIP.defaultBlockState(), 3)))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_POPPIES = ConfiguredFeatureRegistry.register("patch_poppies", Feature.FLOWER, new RandomPatchConfiguration(96, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new NoiseProvider(2345L, new NormalNoise.NoiseParameters(0, 1.0D), 0.075F, List.of(RuBlocks.POPPY_BUSH.get().defaultBlockState(), RuBlocks.SALMON_POPPY_BUSH.get().defaultBlockState()))))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_PRAIRIE_FLOWERS = ConfiguredFeatureRegistry.register("patch_prairie_flowers", Feature.FLOWER, new RandomPatchConfiguration(32, 4, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.POPPY_BUSH.get().defaultBlockState(), 3).add(RuBlocks.RED_LUPINE.get().defaultBlockState(), 2).add(RuBlocks.YELLOW_LUPINE.get().defaultBlockState(), 1))))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_PRISMOSS_SPROUT = ConfiguredFeatureRegistry.register("patch_prismoss_sprout", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RuBlocks.PRISMOSS_SPROUT.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_PURPLE_CONEFLOWER = ConfiguredFeatureRegistry.register("patch_purple_coneflower", Feature.FLOWER, new RandomPatchConfiguration(96, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(getPurpleConeflowerBuilder())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_REDSTONE_BUD = ConfiguredFeatureRegistry.register("patch_redstone_bud", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RuBlocks.REDSTONE_BUD.get().defaultBlockState()), 128));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_REDSTONE_BULB = ConfiguredFeatureRegistry.register("patch_redstone_bulb", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RuBlocks.REDSTONE_BULB.get().defaultBlockState()), 64));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_REDWOODS_VEGETATION = ConfiguredFeatureRegistry.register("patch_redwoods_vegetation", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.FERN.defaultBlockState(), 30).add(Blocks.GRASS.defaultBlockState(), 15).add(Blocks.LARGE_FERN.defaultBlockState(), 1)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_RED_MAPLE_LEAF_PILE = ConfiguredFeatureRegistry.register("patch_red_maple_leaf_pile", Feature.RANDOM_PATCH, new RandomPatchConfiguration(96, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(getRedMapleLeafBuilder())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SALMONBERRY_BUSH = ConfiguredFeatureRegistry.register("patch_salmonberry_bush", Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.SALMONBERRY_BUSH.get().defaultBlockState().setValue(SalmonBerryBushBlock.AGE, Integer.valueOf(3)))), List.of(Blocks.GRASS_BLOCK, Blocks.PODZOL, RuBlocks.PEAT_GRASS_BLOCK.get(), RuBlocks.SILT_GRASS_BLOCK.get(), RuBlocks.PEAT_PODZOL.get(), RuBlocks.SILT_PODZOL.get())));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SANDY_GRASS_VEGETATION = ConfiguredFeatureRegistry.register("patch_sandy_grass_vegetation", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.SANDY_GRASS.get().defaultBlockState(), 20).add(RuBlocks.SANDY_TALL_GRASS.get().defaultBlockState(), 1)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SHRUBLAND_FLOWERS = ConfiguredFeatureRegistry.register("patch_shrubland_flowers", Feature.FLOWER, new RandomPatchConfiguration(32, 4, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.RED_LUPINE.get().defaultBlockState(), 1).add(RuBlocks.BLUE_LUPINE.get().defaultBlockState(), 1))))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SHRUBLAND_VEGETATION = ConfiguredFeatureRegistry.register("patch_shrubland_vegetation", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.FERN.defaultBlockState(), 15).add(Blocks.GRASS.defaultBlockState(), 30).add(Blocks.TALL_GRASS.defaultBlockState(), 15)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SILVER_BIRCH_LEAF_PILE = ConfiguredFeatureRegistry.register("patch_silver_birch_leaf_pile", Feature.RANDOM_PATCH, new RandomPatchConfiguration(96, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(getSilverBirchLeafBuilder())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SMALL_FLOWERS = ConfiguredFeatureRegistry.register("patch_small_flowers", Feature.FLOWER, new RandomPatchConfiguration(96, 6, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new NoiseProvider(2345L, new NormalNoise.NoiseParameters(0, 1.0D), 0.075F, List.of(RuBlocks.MALLOW.get().defaultBlockState(), RuBlocks.YELLOW_LUPINE.get().defaultBlockState(), Blocks.PINK_TULIP.defaultBlockState(), RuBlocks.POPPY_BUSH.get().defaultBlockState(), Blocks.OXEYE_DAISY.defaultBlockState(), RuBlocks.RED_LUPINE.get().defaultBlockState(), Blocks.CORNFLOWER.defaultBlockState(), RuBlocks.PINK_LUPINE.get().defaultBlockState(), RuBlocks.TSUBAKI.get().defaultBlockState(), Blocks.ORANGE_TULIP.defaultBlockState(), RuBlocks.WARATAH.get().defaultBlockState(), Blocks.WHITE_TULIP.defaultBlockState(), RuBlocks.HYSSOP.get().defaultBlockState(), Blocks.ALLIUM.defaultBlockState(), RuBlocks.BLUE_LUPINE.get().defaultBlockState(), RuBlocks.BLEEDING_HEART.get().defaultBlockState(), RuBlocks.SALMON_POPPY_BUSH.get().defaultBlockState(), RuBlocks.WHITE_TRILLIUM.get().defaultBlockState(), Blocks.BLUE_ORCHID.defaultBlockState(), RuBlocks.FIREWEED.get().defaultBlockState(), RuBlocks.DAISY.get().defaultBlockState(), RuBlocks.PURPLE_LUPINE.get().defaultBlockState(), Blocks.RED_TULIP.defaultBlockState(), RuBlocks.FELICIA_DAISY.get().defaultBlockState(), Blocks.POPPY.defaultBlockState(), Blocks.LILY_OF_THE_VALLEY.defaultBlockState()))))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SNOW_GRASS = ConfiguredFeatureRegistry.register("patch_snow_grass", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RuBlocks.FROZEN_GRASS.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SOCOTRA_VEGETATION = ConfiguredFeatureRegistry.register("patch_socotra_vegetation", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.STEPPE_SHRUB.get().defaultBlockState(), 10).add(Blocks.GRASS.defaultBlockState(), 10).add(RuBlocks.SMALL_DESERT_SHRUB.get().defaultBlockState(), 5).add(Blocks.TALL_GRASS.defaultBlockState(), 1)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_STEPPE_VEGETATION = ConfiguredFeatureRegistry.register("patch_steppe_vegetation", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.STEPPE_GRASS.get().defaultBlockState(), 10).add(RuBlocks.STEPPE_SHRUB.get().defaultBlockState(), 10).add(RuBlocks.SMALL_DESERT_SHRUB.get().defaultBlockState(), 1).add(RuBlocks.STEPPE_TALL_GRASS.get().defaultBlockState(), 1).add(RuBlocks.DEAD_STEPPE_SHRUB.get().defaultBlockState(), 10)), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_STONE_BUD = ConfiguredFeatureRegistry.register("patch_stone_bud", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RuBlocks.STONE_BUD.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<SimpleRandomFeatureConfiguration, ?>> PATCH_TALL_FLOWERS = ConfiguredFeatureRegistry.register("patch_tall_flowers", Feature.SIMPLE_RANDOM_SELECTOR, new SimpleRandomFeatureConfiguration(HolderSet.direct(PlacementUtils.inlinePlaced(Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.TASSEL.get())))), PlacementUtils.inlinePlaced(Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.DAY_LILY.get())))),  PlacementUtils.inlinePlaced(Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.MEADOW_SAGE.get())))), PlacementUtils.inlinePlaced(Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.LILAC)))), PlacementUtils.inlinePlaced(Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.ROSE_BUSH)))), PlacementUtils.inlinePlaced(Feature.RANDOM_PATCH, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.PEONY)))), PlacementUtils.inlinePlaced(Feature.NO_BONEMEAL_FLOWER, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.LILY_OF_THE_VALLEY)))))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_TALL_GRASS = ConfiguredFeatureRegistry.register("patch_tall_grass", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(Blocks.TALL_GRASS.defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_TSUBAKI = ConfiguredFeatureRegistry.register("patch_tsubaki", Feature.FLOWER, new RandomPatchConfiguration(32, 1, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.TSUBAKI.get())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_TULIPS = ConfiguredFeatureRegistry.register("patch_tulips", Feature.FLOWER, FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.WHITE_TULIP.defaultBlockState(), 4).add(Blocks.PINK_TULIP.defaultBlockState(), 2).add(Blocks.ORANGE_TULIP.defaultBlockState(), 2).add(Blocks.RED_TULIP.defaultBlockState(), 2)))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_WARATAH = ConfiguredFeatureRegistry.register("patch_waratah", Feature.FLOWER, new RandomPatchConfiguration(8, 1, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.WARATAH.get())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_WHITE_TRILLIUM = ConfiguredFeatureRegistry.register("patch_white_trillium", Feature.FLOWER, new RandomPatchConfiguration(32, 4, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.WHITE_TRILLIUM.get().defaultBlockState())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_WILLOW_FLOWERS = ConfiguredFeatureRegistry.register("patch_willow_flowers", Feature.FLOWER, new RandomPatchConfiguration(32, 4, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.FELICIA_DAISY.get().defaultBlockState(), 2).add(RuBlocks.BLUE_LUPINE.get().defaultBlockState(), 2).add(Blocks.ALLIUM.defaultBlockState(), 1).add(Blocks.CORNFLOWER.defaultBlockState(), 2))))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_WILTING_TRILLIUM = ConfiguredFeatureRegistry.register("patch_wilting_trillium", Feature.FLOWER, new RandomPatchConfiguration(32, 4, 2, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.WILTING_TRILLIUM.get().defaultBlockState())))));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_WINDSWEPT_GRASS = ConfiguredFeatureRegistry.register("patch_windswept_grass", Feature.RANDOM_PATCH, grassPatch(BlockStateProvider.simple(RuBlocks.WINDSWEPT_GRASS.get().defaultBlockState()), 32));
    public static final Holder<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_YELLOW_BIOSHROOM = ConfiguredFeatureRegistry.register("patch_yellow_bioshroom", Feature.RANDOM_PATCH, grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.TALL_YELLOW_BIOSHROOM.get().defaultBlockState(), 1).add(RuBlocks.YELLOW_BIOSHROOM.get().defaultBlockState(), 6)), 6));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> PINE_DEAD_SHRUB_MIX = ConfiguredFeatureRegistry.register("pine_dead_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.PINE_SHRUB.get().defaultBlockState(), 2).add(RuBlocks.DEAD_PINE_SHRUB.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> PINE_SHRUB = ConfiguredFeatureRegistry.register("pine_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.PINE_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> PINE_SPRUCE_SHRUB_MIX = ConfiguredFeatureRegistry.register("pine_spruce_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.PINE_SHRUB.get().defaultBlockState(), 1).add(RuBlocks.SPRUCE_SHRUB.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> PINK_MAGNOLIA_FLOWERS = ConfiguredFeatureRegistry.register("pink_magnolia_flowers", FeatureRegistry.AIR_MULTIFACE_GROWTH.get(), new MultifaceGrowthConfiguration((MultifaceBlock)RuBlocks.PINK_MAGNOLIA_FLOWERS.get(), 20, true, false, false, 1.0F, HolderSet.direct(Block::builtInRegistryHolder, Blocks.GRASS_BLOCK, RuBlocks.PEAT_GRASS_BLOCK.get(), RuBlocks.SILT_GRASS_BLOCK.get())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> PINK_MAGNOLIA_SHRUB = ConfiguredFeatureRegistry.register("pink_magnolia_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.PINK_MAGNOLIA_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> REDWOOD_SHRUB = ConfiguredFeatureRegistry.register("redwood_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.REDWOOD_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> RED_MAPLE_SHRUB = ConfiguredFeatureRegistry.register("red_maple_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.RED_MAPLE_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<SimpleBlockConfiguration, ?>> SANDY_GRASS = ConfiguredFeatureRegistry.register("sandy_grass", Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.SANDY_GRASS.get())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> SILVER_BIRCH_SHRUB = ConfiguredFeatureRegistry.register("silver_birch_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.SILVER_BIRCH_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> SOCOTRA_SHRUB = ConfiguredFeatureRegistry.register("socotra_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.SOCOTRA_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> SPRUCE_SHRUB = ConfiguredFeatureRegistry.register("spruce_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.SPRUCE_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<SimpleBlockConfiguration, ?>> TASSEL = ConfiguredFeatureRegistry.register("tassel", Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.TASSEL.get())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> WHITE_MAGNOLIA_FLOWERS = ConfiguredFeatureRegistry.register("white_magnolia_flowers", FeatureRegistry.AIR_MULTIFACE_GROWTH.get(), new MultifaceGrowthConfiguration((MultifaceBlock)RuBlocks.WHITE_MAGNOLIA_FLOWERS.get(), 20, true, false, false, 1.0F, HolderSet.direct(Block::builtInRegistryHolder, Blocks.GRASS_BLOCK, RuBlocks.PEAT_GRASS_BLOCK.get(), RuBlocks.SILT_GRASS_BLOCK.get())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> WHITE_MAGNOLIA_SHRUB = ConfiguredFeatureRegistry.register("white_magnolia_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.WHITE_MAGNOLIA_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<SimpleBlockConfiguration, ?>> WHITE_SNOWBELLE = ConfiguredFeatureRegistry.register("white_snowbelle", Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(RuBlocks.WHITE_SNOWBELLE.get())));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> WILLOW_CYPRESS_SHRUB_MIX = ConfiguredFeatureRegistry.register("willow_cypress_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.WILLOW_SHRUB.get().defaultBlockState(), 2).add(RuBlocks.CYPRESS_SHRUB.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> WILLOW_MAGNOLIA_SHRUB_MIX = ConfiguredFeatureRegistry.register("willow_magnolia_shrub_mix", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.WILLOW_SHRUB.get().defaultBlockState(), 2).add(RuBlocks.BLUE_MAGNOLIA_SHRUB.get().defaultBlockState(), 1))));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> WILLOW_SHRUB = ConfiguredFeatureRegistry.register("willow_shrub", FeatureRegistry.SHRUB.get(), new ShrubConfiguration(BlockStateProvider.simple(RuBlocks.WILLOW_SHRUB.get().defaultBlockState())));
    public static final Holder<ConfiguredFeature<RandomFeatureConfiguration, ?>> PRAIRIE_TREE_MIX = ConfiguredFeatureRegistry.register("prairie_tree_mix", Feature.RANDOM_SELECTOR, new RandomFeatureConfiguration(List.of(new WeightedPlacedFeature(PlacementUtils.inlinePlaced(RuTreeFeatures.BIG_OAK_TREE), 0.33333334F)), PlacementUtils.inlinePlaced(RuTreeFeatures.OAK_TREE)));

    private static RandomPatchConfiguration grassPatch(BlockStateProvider stateProvider, int i) {
        return FeatureUtils.simpleRandomPatchConfiguration(i, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(stateProvider)));
    }
}
