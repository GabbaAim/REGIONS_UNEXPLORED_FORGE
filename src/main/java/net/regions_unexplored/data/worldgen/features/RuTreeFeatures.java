package net.regions_unexplored.data.worldgen.features;

import com.google.common.collect.ImmutableList;
import net.minecraft.core.Holder;
import net.minecraft.util.random.SimpleWeightedRandomList;
import net.minecraft.util.valueproviders.ConstantInt;
import net.minecraft.util.valueproviders.IntProvider;
import net.minecraft.util.valueproviders.UniformInt;
import net.minecraft.util.valueproviders.WeightedListInt;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.HugeMushroomBlock;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
import net.minecraft.world.level.levelgen.feature.Feature;
import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
import net.minecraft.world.level.levelgen.feature.featuresize.ThreeLayersFeatureSize;
import net.minecraft.world.level.levelgen.feature.featuresize.TwoLayersFeatureSize;
import net.minecraft.world.level.levelgen.feature.foliageplacers.*;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.WeightedStateProvider;
import net.minecraft.world.level.levelgen.feature.treedecorators.BeehiveDecorator;
import net.minecraft.world.level.levelgen.feature.treedecorators.LeaveVineDecorator;
import net.minecraft.world.level.levelgen.feature.trunkplacers.*;
import net.regions_unexplored.block.RuBlocks;
import net.regions_unexplored.registry.ConfiguredFeatureRegistry;
import net.regions_unexplored.registry.FeatureRegistry;
import net.regions_unexplored.world.features.foliageplacers.SakuraFoliagePlacer;
import net.regions_unexplored.world.features.foliageplacers.WillowFoliagePlacer;
import net.regions_unexplored.world.features.treedecorators.ChanceWillowTrunkDecorator;
import net.regions_unexplored.world.features.treedecorators.WillowTrunkDecorator;
import net.regions_unexplored.world.level.block.leaves.AppleLeavesBlock;
import net.regions_unexplored.world.level.block.wood.BambooLogBlock;
import net.regions_unexplored.world.level.feature.configuration.GiantBioshroomConfiguration;
import net.regions_unexplored.world.level.feature.configuration.RuTreeConfiguration;
import org.antlr.runtime.tree.Tree;

import java.util.List;
import java.util.OptionalInt;

public class RuTreeFeatures {
    //-----------------------KEYS-----------------------//
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> GIANT_BLUE_BIOSHROOM = ConfiguredFeatureRegistry.register("giant_blue_bioshroom", FeatureRegistry.GIANT_BLUE_BIOSHROOM.get(), new GiantBioshroomConfiguration(BlockStateProvider.simple(RuBlocks.BLUE_BIOSHROOM_STEM.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.BLUE_BIOSHROOM_BLOCK.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.GLOWING_BLUE_BIOSHROOM_BLOCK.get().defaultBlockState()), 7, 7));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> GIANT_GREEN_BIOSHROOM = ConfiguredFeatureRegistry.register("giant_green_bioshroom", FeatureRegistry.GIANT_GREEN_BIOSHROOM.get(), new GiantBioshroomConfiguration(BlockStateProvider.simple(RuBlocks.GREEN_BIOSHROOM_STEM.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.GREEN_BIOSHROOM_BLOCK.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.GLOWING_GREEN_BIOSHROOM_BLOCK.get().defaultBlockState()), 8, 5));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> GIANT_PINK_BIOSHROOM = ConfiguredFeatureRegistry.register("giant_pink_bioshroom", FeatureRegistry.GIANT_PINK_BIOSHROOM.get(), new GiantBioshroomConfiguration(BlockStateProvider.simple(RuBlocks.PINK_BIOSHROOM_STEM.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINK_BIOSHROOM_BLOCK.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.GLOWING_PINK_BIOSHROOM_BLOCK.get().defaultBlockState()), 7, 8));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> GIANT_YELLOW_BIOSHROOM = ConfiguredFeatureRegistry.register("giant_yellow_bioshroom", FeatureRegistry.GIANT_YELLOW_BIOSHROOM.get(), new GiantBioshroomConfiguration(BlockStateProvider.simple(RuBlocks.YELLOW_BIOSHROOM_STEM.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.YELLOW_BIOSHROOM_BLOCK.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.GLOWING_YELLOW_BIOSHROOM_BLOCK.get().defaultBlockState()), 5, 4));
    public static final Holder<ConfiguredFeature<HugeMushroomFeatureConfiguration, ?>> GIANT_BROWN_MUSHROOM = ConfiguredFeatureRegistry.register("giant_brown_mushroom", Feature.HUGE_BROWN_MUSHROOM, new HugeMushroomFeatureConfiguration(BlockStateProvider.simple(Blocks.BROWN_MUSHROOM_BLOCK.defaultBlockState().setValue(HugeMushroomBlock.UP, Boolean.valueOf(true)).setValue(HugeMushroomBlock.DOWN, Boolean.valueOf(false))), BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState().setValue(HugeMushroomBlock.UP, Boolean.valueOf(false)).setValue(HugeMushroomBlock.DOWN, Boolean.valueOf(false))), 3));
    public static final Holder<ConfiguredFeature<HugeMushroomFeatureConfiguration, ?>> GIANT_RED_MUSHROOM = ConfiguredFeatureRegistry.register("giant_red_mushroom", Feature.HUGE_RED_MUSHROOM, new HugeMushroomFeatureConfiguration(BlockStateProvider.simple(Blocks.RED_MUSHROOM_BLOCK.defaultBlockState().setValue(HugeMushroomBlock.DOWN, Boolean.valueOf(false))), BlockStateProvider.simple(Blocks.MUSHROOM_STEM.defaultBlockState().setValue(HugeMushroomBlock.UP, Boolean.valueOf(false)).setValue(HugeMushroomBlock.DOWN, Boolean.valueOf(false))), 2));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> BRIM_WILLOW_TREE = ConfiguredFeatureRegistry.register("brim_willow_tree", FeatureRegistry.BRIM_WILLOW.get(), FeatureConfiguration.NONE);
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> TALL_BRIM_WILLOW_TREE = ConfiguredFeatureRegistry.register("tall_brim_willow_tree", FeatureRegistry.TALL_BRIM_WILLOW.get(), FeatureConfiguration.NONE);

    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> ACACIA_TREE = ConfiguredFeatureRegistry.register("acacia_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.ACACIA_LOG), new ForkingTrunkPlacer(5, 2, 2), BlockStateProvider.simple(Blocks.ACACIA_LEAVES), new AcaciaFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0)), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> ACACIA_TREE_SHRUB = ConfiguredFeatureRegistry.register("acacia_tree_shrub", FeatureRegistry.TREE_SHRUB.get(), new RuTreeConfiguration(BlockStateProvider.simple(Blocks.ACACIA_LOG.defaultBlockState()), BlockStateProvider.simple(Blocks.ACACIA_LEAVES.defaultBlockState()), BlockStateProvider.simple(RuBlocks.ACACIA_BRANCH.get().defaultBlockState()), 1, 3));

    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> ALPHA_OAK_TREE = ConfiguredFeatureRegistry.register("alpha_oak_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.ALPHA_LOG.get().defaultBlockState()), new StraightTrunkPlacer(4, 2, 0),BlockStateProvider.simple(RuBlocks.ALPHA_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> ASHEN_TREE = ConfiguredFeatureRegistry.register("ashen_tree", FeatureRegistry.ASHEN_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.ASHEN_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.ASHEN_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.DEAD_BRANCH.get().defaultBlockState()), 12, 5));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> ASHEN_PINE_TREE = ConfiguredFeatureRegistry.register("ashen_pine_tree", FeatureRegistry.ASHEN_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.ASHEN_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.DEAD_BRANCH.get().defaultBlockState()), 12, 7));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> BAMBOO_TREE = ConfiguredFeatureRegistry.register("bamboo_tree", FeatureRegistry.BAMBOO_TREE.get(), new RuTreeConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(RuBlocks.BAMBOO_LOG.get().defaultBlockState(), 1).add(RuBlocks.BAMBOO_LOG.get().defaultBlockState().setValue(BambooLogBlock.LEAVES, true), 2)), BlockStateProvider.simple(RuBlocks.BAMBOO_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.OAK_BRANCH.get().defaultBlockState()), 12, 8));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> MEGA_BAOBAB_TREE = ConfiguredFeatureRegistry.register("mega_baobab_tree", FeatureRegistry.MEGA_BAOBAB_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.BAOBAB_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.BAOBAB_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.BAOBAB_BRANCH.get()), 5, 5));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> ULTRA_BAOBAB_TREE = ConfiguredFeatureRegistry.register("ultra_baobab_tree", FeatureRegistry.ULTRA_BAOBAB_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.BAOBAB_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.BAOBAB_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.BAOBAB_BRANCH.get()), 12, 6));

    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> FLOWERING_OAK_TREE = ConfiguredFeatureRegistry.register("flowering_oak_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new StraightTrunkPlacer(4, 3, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 3).add(RuBlocks.FLOWERING_LEAVES.get().defaultBlockState(), 1)),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_FLOWERING_OAK_TREE = ConfiguredFeatureRegistry.register("big_flowering_oak_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 3).add(RuBlocks.FLOWERING_LEAVES.get().defaultBlockState(), 1)),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> APPLE_OAK_TREE = ConfiguredFeatureRegistry.register("apple_oak_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new StraightTrunkPlacer(4, 2, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 18).add(RuBlocks.APPLE_OAK_LEAVES.get().defaultBlockState(), 1).add(RuBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(1)), 1).add(RuBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(2)), 2).add(RuBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(3)), 2).add(RuBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(4)), 2)),new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_APPLE_OAK_TREE = ConfiguredFeatureRegistry.register("big_apple_oak_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 14).add(RuBlocks.APPLE_OAK_LEAVES.get().defaultBlockState(), 1).add(RuBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(1)), 1).add(RuBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(2)), 2).add(RuBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(3)), 2).add(RuBlocks.APPLE_OAK_LEAVES.get().defaultBlockState().setValue(AppleLeavesBlock.AGE, Integer.valueOf(4)), 2)),new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(2), 3), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BLACKWOOD_TREE = ConfiguredFeatureRegistry.register("blackwood_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.BLACKWOOD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(12, 4, 2), BlockStateProvider.simple(RuBlocks.BLACKWOOD_LEAVES.get().defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> BIG_BLACKWOOD_TREE = ConfiguredFeatureRegistry.register("big_blackwood_tree", FeatureRegistry.BLACKWOOD_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.BLACKWOOD_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.BLACKWOOD_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.BLACKWOOD_BRANCH.get().defaultBlockState()), 19, 5));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> BIRCH_TREE_ASPEN = ConfiguredFeatureRegistry.register("birch_tree_aspen", FeatureRegistry.ASPEN_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(Blocks.BIRCH_LOG.defaultBlockState()), BlockStateProvider.simple(Blocks.BIRCH_LEAVES.defaultBlockState()), BlockStateProvider.simple(RuBlocks.BIRCH_BRANCH.get().defaultBlockState()), 4, 3));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> COBALT_TREE = ConfiguredFeatureRegistry.register("cobalt_tree", FeatureRegistry.COBALT_TREE.get(), FeatureConfiguration.NONE);

    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> TALL_DARK_OAK = ConfiguredFeatureRegistry.register("tall_dark_oak", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.DARK_OAK_LOG), new DarkOakTrunkPlacer(8, 4, 1), BlockStateProvider.simple(Blocks.DARK_OAK_LEAVES), new DarkOakFoliagePlacer(ConstantInt.of(0), ConstantInt.of(0)), new ThreeLayersFeatureSize(1, 1, 0, 1, 2, OptionalInt.empty())).ignoreVines().build());

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> MAGNOLIA_TREE = ConfiguredFeatureRegistry.register("magnolia_tree", FeatureRegistry.SAKURA_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.MAGNOLIA_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.MAGNOLIA_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.MAGNOLIA_BRANCH.get().defaultBlockState()), 1, 4));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> BLUE_MAGNOLIA_TREE = ConfiguredFeatureRegistry.register("blue_magnolia_tree", FeatureRegistry.SAKURA_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.MAGNOLIA_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.BLUE_MAGNOLIA_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.MAGNOLIA_BRANCH.get().defaultBlockState()), 1, 4));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> PINK_MAGNOLIA_TREE = ConfiguredFeatureRegistry.register("pink_magnolia_tree", FeatureRegistry.SAKURA_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.MAGNOLIA_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINK_MAGNOLIA_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.MAGNOLIA_BRANCH.get().defaultBlockState()), 1, 4));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> WHITE_MAGNOLIA_TREE = ConfiguredFeatureRegistry.register("white_magnolia_tree", FeatureRegistry.SAKURA_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.MAGNOLIA_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.WHITE_MAGNOLIA_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.MAGNOLIA_BRANCH.get().defaultBlockState()), 1, 5));
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_MAGNOLIA_TREE = ConfiguredFeatureRegistry.register("big_magnolia_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.MAGNOLIA_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RuBlocks.MAGNOLIA_LEAVES.get().defaultBlockState()),new SakuraFoliagePlacer(ConstantInt.of(4), ConstantInt.of(0), ConstantInt.of(5), 0.25F), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_BLUE_MAGNOLIA_TREE = ConfiguredFeatureRegistry.register("big_blue_magnolia_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.MAGNOLIA_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RuBlocks.BLUE_MAGNOLIA_LEAVES.get().defaultBlockState()),new SakuraFoliagePlacer(ConstantInt.of(4), ConstantInt.of(0), ConstantInt.of(5), 0.25F), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_PINK_MAGNOLIA_TREE = ConfiguredFeatureRegistry.register("big_pink_magnolia_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.MAGNOLIA_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RuBlocks.PINK_MAGNOLIA_LEAVES.get().defaultBlockState()),new SakuraFoliagePlacer(ConstantInt.of(4), ConstantInt.of(0), ConstantInt.of(5), 0.25F), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_WHITE_MAGNOLIA_TREE = ConfiguredFeatureRegistry.register("big_white_magnolia_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.MAGNOLIA_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RuBlocks.WHITE_MAGNOLIA_LEAVES.get().defaultBlockState()),new SakuraFoliagePlacer(ConstantInt.of(4), ConstantInt.of(0), ConstantInt.of(5), 0.25F), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> CYPRESS_TREE = ConfiguredFeatureRegistry.register("cypress_tree", FeatureRegistry.CYPRESS_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.CYPRESS_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.CYPRESS_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.CYPRESS_BRANCH.get().defaultBlockState()), 17, 4));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> GIANT_CYPRESS_TREE = ConfiguredFeatureRegistry.register("giant_cypress_tree", FeatureRegistry.GIANT_CYPRESS_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.CYPRESS_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.CYPRESS_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.CYPRESS_BRANCH.get().defaultBlockState()), 25, 5));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> DEAD_BOG_TREE = ConfiguredFeatureRegistry.register("dead_bog_tree", FeatureRegistry.DEAD_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.DEAD_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.DEAD_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.DEAD_BRANCH.get().defaultBlockState()), 6, 2));
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> DEAD_TREE = ConfiguredFeatureRegistry.register("dead_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.DEAD_LOG.get().defaultBlockState()), new StraightTrunkPlacer(6, 2, 0),BlockStateProvider.simple(RuBlocks.DEAD_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_DEAD_TREE = ConfiguredFeatureRegistry.register("big_dead_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.DEAD_LOG.get().defaultBlockState()),new FancyTrunkPlacer(12, 3, 0),BlockStateProvider.simple(RuBlocks.DEAD_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(1), ConstantInt.of(2), 3), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> DEAD_PINE_TREE = ConfiguredFeatureRegistry.register("dead_pine_tree", FeatureRegistry.PINE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PINE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_BRANCH.get().defaultBlockState()), 10, 4));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> DEAD_PINE_TREE_TALL = ConfiguredFeatureRegistry.register("dead_pine_tree_tall", FeatureRegistry.PINE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PINE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_BRANCH.get().defaultBlockState()), 14, 5));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> DEAD_STRIPPED_PINE_TREE = ConfiguredFeatureRegistry.register("dead_stripped_pine_tree", FeatureRegistry.STRIPPED_PINE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PINE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_BRANCH.get().defaultBlockState()), 10, 4));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> DEAD_STRIPPED_PINE_TREE_TALL = ConfiguredFeatureRegistry.register("dead_stripped_pine_tree_tall", FeatureRegistry.STRIPPED_PINE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PINE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_BRANCH.get().defaultBlockState()), 14, 5));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> DEAD_STRIPPED_PINE_TREE_MOUNTAIN = ConfiguredFeatureRegistry.register("dead_stripped_pine_tree_mountain", FeatureRegistry.STRIPPED_PINE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PINE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.DEAD_PINE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_BRANCH.get().defaultBlockState()), 15, 7));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> SMALL_EUCALYPTUS_TREE = ConfiguredFeatureRegistry.register("small_eucalyptus_tree", FeatureRegistry.SMALL_EUCALYPTUS_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.EUCALYPTUS_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.EUCALYPTUS_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.EUCALYPTUS_BRANCH.get().defaultBlockState()), 13, 8));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> EUCALYPTUS_TREE = ConfiguredFeatureRegistry.register("eucalyptus_tree", FeatureRegistry.EUCALYPTUS_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.EUCALYPTUS_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.EUCALYPTUS_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.EUCALYPTUS_BRANCH.get().defaultBlockState()), 14, 8));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> LARGE_JOSHUA_TREE = ConfiguredFeatureRegistry.register("large_joshua_tree", FeatureRegistry.LARGE_JOSHUA_TREE.get(), FeatureConfiguration.NONE);
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> MEDIUM_JOSHUA_TREE = ConfiguredFeatureRegistry.register("medium_joshua_tree", FeatureRegistry.MEDIUM_JOSHUA_TREE.get(), FeatureConfiguration.NONE);
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> JOSHUA_TREE_SHRUB = ConfiguredFeatureRegistry.register("joshua_tree_shrub", FeatureRegistry.SMALL_JOSHUA_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.JOSHUA_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.JOSHUA_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.JOSHUA_BEARD.get().defaultBlockState()), 1, 1));

    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> JUNGLE_TREE = ConfiguredFeatureRegistry.register("jungle_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.JUNGLE_LOG.defaultBlockState()), new StraightTrunkPlacer(6, 5, 0), BlockStateProvider.simple(Blocks.JUNGLE_LEAVES.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(new LeaveVineDecorator(0.25f))).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_JUNGLE_TREE = ConfiguredFeatureRegistry.register("big_jungle_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.JUNGLE_LOG.defaultBlockState()), new FancyTrunkPlacer(9, 11, 0), BlockStateProvider.simple(Blocks.JUNGLE_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().decorators(ImmutableList.of(new LeaveVineDecorator(0.25f))).build());

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> KAPOK_TREE = ConfiguredFeatureRegistry.register("kapok_tree", FeatureRegistry.KAPOK_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.KAPOK_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.KAPOK_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.KAPOK_BRANCH.get().defaultBlockState()), 20, 7));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> LARCH_TREE = ConfiguredFeatureRegistry.register("larch_tree", FeatureRegistry.LARCH_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.LARCH_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.LARCH_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.LARCH_BRANCH.get().defaultBlockState()), 18, 5));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> BIG_LARCH_TREE = ConfiguredFeatureRegistry.register("big_larch_tree", FeatureRegistry.LARCH_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.LARCH_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.LARCH_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.LARCH_BRANCH.get().defaultBlockState()), 23, 7));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> GOLDEN_LARCH_TREE = ConfiguredFeatureRegistry.register("larch_golden_tree", FeatureRegistry.LARCH_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.LARCH_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.GOLDEN_LARCH_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.LARCH_BRANCH.get().defaultBlockState()), 18, 5));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> BIG_GOLDEN_LARCH_TREE = ConfiguredFeatureRegistry.register("big_golden_larch_tree", FeatureRegistry.LARCH_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.LARCH_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.GOLDEN_LARCH_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.LARCH_BRANCH.get().defaultBlockState()), 23, 7));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> MAPLE_TREE = ConfiguredFeatureRegistry.register("maple_tree", FeatureRegistry.MAPLE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.MAPLE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.MAPLE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.MAPLE_BRANCH.get().defaultBlockState()), 6, 4));
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_MAPLE_TREE = ConfiguredFeatureRegistry.register("big_maple_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.MAPLE_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RuBlocks.MAPLE_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> RED_MAPLE_TREE = ConfiguredFeatureRegistry.register("red_maple_tree", FeatureRegistry.MAPLE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.MAPLE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.RED_MAPLE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.MAPLE_BRANCH.get().defaultBlockState()), 6, 4));
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_RED_MAPLE_TREE = ConfiguredFeatureRegistry.register("big_red_maple_tree", Feature.TREE,new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.MAPLE_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RuBlocks.RED_MAPLE_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> ORANGE_MAPLE_TREE = ConfiguredFeatureRegistry.register("orange_maple_tree", FeatureRegistry.MAPLE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.MAPLE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.ORANGE_MAPLE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.MAPLE_BRANCH.get().defaultBlockState()), 6, 4));
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_ORANGE_MAPLE_TREE = ConfiguredFeatureRegistry.register("big_orange_maple_tree", Feature.TREE,new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.MAPLE_LOG.get().defaultBlockState()),new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RuBlocks.ORANGE_MAPLE_LEAVES.get().defaultBlockState()),new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> MAUVE_OAK_BEE = ConfiguredFeatureRegistry.register("mauve_oak_bee", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.MAUVE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(5, 2, 0),BlockStateProvider.simple(RuBlocks.MAUVE_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(List.of(new BeehiveDecorator(1f))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> MAUVE_OAK = ConfiguredFeatureRegistry.register("mauve_oak", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.MAUVE_LOG.get().defaultBlockState()), new StraightTrunkPlacer(5, 2, 0),BlockStateProvider.simple(RuBlocks.MAUVE_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(List.of(new BeehiveDecorator(0.25f))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_MAUVE_OAK = ConfiguredFeatureRegistry.register("big_mauve_oak", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.MAUVE_LOG.get().defaultBlockState()), new FancyTrunkPlacer(8, 11, 0),BlockStateProvider.simple(RuBlocks.MAUVE_LEAVES.get().defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> OAK_TREE_WITH_BRANCH = ConfiguredFeatureRegistry.register("oak_tree_with_branch", FeatureRegistry.MAPLE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), BlockStateProvider.simple(RuBlocks.OAK_BRANCH.get().defaultBlockState()), 6, 4));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> OAK_TREE_WITH_FLOWERS = ConfiguredFeatureRegistry.register("oak_tree_with_flowers", FeatureRegistry.ASPEN_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 3).add(RuBlocks.FLOWERING_LEAVES.get().defaultBlockState(), 1)), BlockStateProvider.simple(RuBlocks.OAK_BRANCH.get().defaultBlockState()), 5, 5));
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> OAK_TREE = ConfiguredFeatureRegistry.register("oak_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(5, 3, 0),BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(List.of(new BeehiveDecorator(0.005f))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> OAK_TREE_TALL = ConfiguredFeatureRegistry.register("oak_tree_tall", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(6, 4, 0),BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(2), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(List.of(new BeehiveDecorator(0.005f))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_OAK_TREE = ConfiguredFeatureRegistry.register("big_oak_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new FancyTrunkPlacer(7, 10, 0),BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new FancyFoliagePlacer(ConstantInt.of(2), ConstantInt.of(4), 4), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().build());
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> OAK_TREE_SHRUB = ConfiguredFeatureRegistry.register("oak_tree_shrub", FeatureRegistry.TREE_SHRUB.get(), new RuTreeConfiguration(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), BlockStateProvider.simple(RuBlocks.OAK_BRANCH.get().defaultBlockState()), 1, 0));
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> OAK_BUSH = ConfiguredFeatureRegistry.register("oak_bush", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), BlockStateProvider.simple(Blocks.OAK_LEAVES.defaultBlockState()), new BushFoliagePlacer(ConstantInt.of(2), ConstantInt.of(1), 2), new TwoLayersFeatureSize(0, 0, 0)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> OAK_BUSH_WITH_FLOWERS = ConfiguredFeatureRegistry.register("oak_bush_with_flowers", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.OAK_LOG.defaultBlockState()), new StraightTrunkPlacer(1, 0, 0), new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OAK_LEAVES.defaultBlockState(), 3).add(RuBlocks.FLOWERING_LEAVES.get().defaultBlockState(), 1)), new BushFoliagePlacer(ConstantInt.of(2), ConstantInt.of(1), 2), new TwoLayersFeatureSize(0, 0, 0)).build());

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> PALM_TREE = ConfiguredFeatureRegistry.register("palm_tree", FeatureRegistry.PALM_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PALM_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PALM_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PALM_BEARD.get().defaultBlockState()), 8, 5));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> TALL_PALM_TREE = ConfiguredFeatureRegistry.register("tall_palm_tree", FeatureRegistry.PALM_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PALM_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PALM_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PALM_BEARD.get().defaultBlockState()), 12, 5));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> PALM_TREE_SHRUB = ConfiguredFeatureRegistry.register("palm_tree_shrub", FeatureRegistry.PALM_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PALM_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PALM_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PALM_BEARD.get().defaultBlockState()), 2, 1));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> PINE_TREE = ConfiguredFeatureRegistry.register("pine_tree", FeatureRegistry.PINE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PINE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_BRANCH.get().defaultBlockState()), 10, 4));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> PINE_TREE_TALL = ConfiguredFeatureRegistry.register("pine_tree_tall", FeatureRegistry.PINE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PINE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_BRANCH.get().defaultBlockState()), 14, 5));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> STRIPPED_PINE_TREE = ConfiguredFeatureRegistry.register("stripped_pine_tree", FeatureRegistry.STRIPPED_PINE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PINE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_BRANCH.get().defaultBlockState()), 10, 4));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> STRIPPED_PINE_TREE_TALL = ConfiguredFeatureRegistry.register("stripped_pine_tree_tall", FeatureRegistry.STRIPPED_PINE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PINE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_BRANCH.get().defaultBlockState()), 14, 5));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> STRIPPED_PINE_TREE_MOUNTAIN = ConfiguredFeatureRegistry.register("stripped_pine_tree_mountain", FeatureRegistry.STRIPPED_PINE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PINE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_BRANCH.get().defaultBlockState()), 15, 7));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> PINE_TREE_SHRUB = ConfiguredFeatureRegistry.register("pine_tree_shrub", FeatureRegistry.TREE_SHRUB.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PINE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_BRANCH.get().defaultBlockState()), 1, 2));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> LUSH_PINE_TREE = ConfiguredFeatureRegistry.register("lush_pine_tree", FeatureRegistry.LUSH_PINE_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.PINE_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.PINE_BRANCH.get().defaultBlockState()), 19, 4));
    //DONE
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> SAGUARO_CACTUS = ConfiguredFeatureRegistry.register("saguaro_cactus", FeatureRegistry.SAGUARO_CACTUS.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.SAGUARO_CACTUS.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.CACTUS_FLOWER.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.REDWOOD_BRANCH.get().defaultBlockState()), 7, 2));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> ICE_SPIRE = ConfiguredFeatureRegistry.register("ice_spire", FeatureRegistry.SPIRE.get(), new RuTreeConfiguration(BlockStateProvider.simple(Blocks.PACKED_ICE.defaultBlockState()), BlockStateProvider.simple(Blocks.ICE.defaultBlockState()), BlockStateProvider.simple(Blocks.BLUE_ICE), 14, 9));
    //DONE
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> SILVER_BIRCH_TREE = ConfiguredFeatureRegistry.register("silver_birch_tree", FeatureRegistry.ASPEN_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.SILVER_BIRCH_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.SILVER_BIRCH_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.SILVER_BIRCH_BRANCH.get().defaultBlockState()), 4, 4));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> SILVER_BIRCH_TREE_TALL = ConfiguredFeatureRegistry.register("silver_birch_tree_tall", FeatureRegistry.ASPEN_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.SILVER_BIRCH_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.SILVER_BIRCH_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.SILVER_BIRCH_BRANCH.get().defaultBlockState()), 5, 5));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> ENCHANTED_BIRCH_TREE = ConfiguredFeatureRegistry.register("enchanted_birch_tree", FeatureRegistry.ASPEN_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.SILVER_BIRCH_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.ENCHANTED_BIRCH_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.SILVER_BIRCH_BRANCH.get().defaultBlockState()), 4, 4));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> ENCHANTED_BIRCH_TREE_TALL = ConfiguredFeatureRegistry.register("enchanted_birch_tree_tall", FeatureRegistry.ASPEN_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.SILVER_BIRCH_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.ENCHANTED_BIRCH_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.SILVER_BIRCH_BRANCH.get().defaultBlockState()), 5, 5));

    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> SPRUCE_TREE_TALL = ConfiguredFeatureRegistry.register("spruce_tree_tall", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(Blocks.SPRUCE_LOG.defaultBlockState()), new StraightTrunkPlacer(13, 2, 2), BlockStateProvider.simple(Blocks.SPRUCE_LEAVES.defaultBlockState()), new SpruceFoliagePlacer(UniformInt.of(2, 3), UniformInt.of(2, 2), UniformInt.of(5, 5)), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> SPRUCE_TREE_SHRUB = ConfiguredFeatureRegistry.register("spruce_tree_shrub", FeatureRegistry.TREE_SHRUB.get(), new RuTreeConfiguration(BlockStateProvider.simple(Blocks.SPRUCE_LOG.defaultBlockState()), BlockStateProvider.simple(Blocks.SPRUCE_LEAVES.defaultBlockState()), BlockStateProvider.simple(RuBlocks.OAK_BRANCH.get().defaultBlockState()), 1, 0));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> SMALL_OAK_TREE = ConfiguredFeatureRegistry.register("small_oak_tree", FeatureRegistry.SMALL_OAK_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.SMALL_OAK_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.SMALL_OAK_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.OAK_BRANCH.get().defaultBlockState()), 5, 4));

    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> LARGE_SOCOTRA_TREE = ConfiguredFeatureRegistry.register("large_socotra_tree", FeatureRegistry.LARGE_SOCOTRA_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.SOCOTRA_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.SOCOTRA_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.SOCOTRA_BRANCH.get()), 8, 5));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> SMALL_SOCOTRA_TREE = ConfiguredFeatureRegistry.register("small_socotra_tree", FeatureRegistry.SMALL_SOCOTRA_TREE.get(), FeatureConfiguration.NONE);
    //DONE
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> REDWOOD_TREE = ConfiguredFeatureRegistry.register("redwood_tree", FeatureRegistry.REDWOOD_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.REDWOOD_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.REDWOOD_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.REDWOOD_BRANCH.get()), 21, 9));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> GIANT_REDWOOD_TREE = ConfiguredFeatureRegistry.register("giant_redwood_tree", FeatureRegistry.SUPER_REDWOOD_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.REDWOOD_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.REDWOOD_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.REDWOOD_BRANCH.get()), 30, 14));
    public static final Holder<ConfiguredFeature<FeatureConfiguration, ?>> ULTRA_REDWOOD_TREE = ConfiguredFeatureRegistry.register("ultra_redwood_tree", FeatureRegistry.ULTRA_REDWOOD_TREE.get(), new RuTreeConfiguration(BlockStateProvider.simple(RuBlocks.REDWOOD_LOG.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.REDWOOD_LEAVES.get().defaultBlockState()), BlockStateProvider.simple(RuBlocks.REDWOOD_BRANCH.get()), 45, 9));

    //DONE
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> WILLOW_TREE = ConfiguredFeatureRegistry.register("willow_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.WILLOW_LOG.get().defaultBlockState()), new StraightTrunkPlacer(8, 2, 0),BlockStateProvider.simple(RuBlocks.WILLOW_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(3), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(ChanceWillowTrunkDecorator.INSTANCE)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> BIG_WILLOW_TREE = ConfiguredFeatureRegistry.register("big_willow_tree", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.WILLOW_LOG.get().defaultBlockState()), new FancyTrunkPlacer(9, 9, 0), BlockStateProvider.simple(RuBlocks.WILLOW_LEAVES.get().defaultBlockState()), new WillowFoliagePlacer(ConstantInt.of(4), ConstantInt.of(0), ConstantInt.of(5), 0.25F), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().decorators(ImmutableList.of(ChanceWillowTrunkDecorator.INSTANCE)).build());
    public static final Holder<ConfiguredFeature<TreeConfiguration, ?>> WILLOW_TREE_VINES = ConfiguredFeatureRegistry.register("willow_tree_vines", Feature.TREE, new TreeConfiguration.TreeConfigurationBuilder(BlockStateProvider.simple(RuBlocks.WILLOW_LOG.get().defaultBlockState()), new StraightTrunkPlacer(8, 2, 0),BlockStateProvider.simple(RuBlocks.WILLOW_LEAVES.get().defaultBlockState()), new BlobFoliagePlacer(ConstantInt.of(3), ConstantInt.of(0), 3), new TwoLayersFeatureSize(1, 0, 1)).decorators(ImmutableList.of(new LeaveVineDecorator(0.25f), WillowTrunkDecorator.INSTANCE)).build());


        
        
        
        

        
        
        
}
